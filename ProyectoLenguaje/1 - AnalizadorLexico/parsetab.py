
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftMULTDIVleftPOWERAND AS COLON COMMA COMMENT DIM DIV DO ELSE END ENDIF EQ EQUAL FLOAT FOR GE GOSUB GT ID IF IN INT LBRACK LE LET LOOP LPAREN LT MAT MINUS MULT NE NEXT NFLOAT NINT NOT OR PEND PLUS POWER PRINT PROGRAM RBRACK RPAREN SUBEND SUBPROCEDURE THEN VEC WEND WHILE\n    START : PROGRAM V P S PEND\n    \n    V : DIM ID AS VARTYPE V\n    \n    V : LET ID EQUAL VAR V S\n    \n    V : EMPTY\n    \n    P : SUBPROCEDURE LPAREN ID RPAREN V P S END\n    \n    P : IN LPAREN NUMTYPE RPAREN S\n    \n    P : PRINT LPAREN NUMTYPE RPAREN S\n    \n    P : EMPTY\n    \n    S : IF LPAREN RELEXPR RPAREN THEN S IFELSE END S\n    \n    IFELSE : ELSE THEN S\n    |\n    \n    S : WHILE LPAREN RELEXPR RPAREN S WEND S\n    \n    S : DO COLON S WHILE LPAREN RELEXPR RPAREN S\n    \n    S : FOR LPAREN RELEXPR COMMA RELEXPR RPAREN S\n    \n    S : E\n    \n    S : EMPTY\n    \n    VARTYPE : INT\n    | FLOAT\n    | VECDEF\n    | MATDEF\n    \n    NUMTYPE : ID\n    | NINT\n    | NFLOAT\n    \n    VAR : NINT\n    | NFLOAT\n    | VECTOR\n    | MATRIX\n    | ID\n    \n    VECDEF : VEC LBRACK VAR RBRACK\n    \n    MATDEF : MAT LBRACK VAR RBRACK LBRACK VAR RBRACK\n    \n    VECTOR : ID LBRACK NUMTYPE RBRACK\n    \n    MATRIX : ID LBRACK NUMTYPE COMMA NUMTYPE RBRACK\n    \n    RELEXPR : VAR LT VAR\n    | VAR LE VAR\n    | VAR GT VAR\n    | VAR GE VAR\n    | VAR EQ VAR\n    | VAR NE VAR\n    \n    E : E PLUS T\n    | E MINUS T\n    \n    E : T\n    \n    T : T MULT F\n    | T DIV F\n    \n    T : F\n    \n    F : LPAREN E RPAREN\n    \n    F : NINT\n    | NFLOAT\n    | VECTOR\n    | MATRIX\n    | ID\n    \n    EMPTY : \n    '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,34,],[0,-1,]),'DIM':([2,51,52,53,54,55,58,59,60,61,62,63,75,92,112,118,131,],[4,4,-17,-18,-19,-20,-28,4,-24,-25,-26,-27,4,-31,-29,-32,-30,]),'LET':([2,51,52,53,54,55,58,59,60,61,62,63,75,92,112,118,131,],[5,5,-17,-18,-19,-20,-28,5,-24,-25,-26,-27,5,-31,-29,-32,-30,]),'SUBPROCEDURE':([2,3,6,20,21,22,23,24,25,26,27,28,51,52,53,54,55,58,59,60,61,62,63,66,70,71,72,73,75,78,81,92,94,99,112,115,117,118,123,124,125,128,130,131,132,],[-51,8,-4,-15,-16,-41,-44,-46,-47,-48,-49,-50,-51,-17,-18,-19,-20,-28,-51,-24,-25,-26,-27,-45,-39,-40,-42,-43,-51,-2,-51,-31,8,-3,-29,-51,-51,-32,-12,-51,-14,-51,-13,-30,-9,]),'IN':([2,3,6,20,21,22,23,24,25,26,27,28,51,52,53,54,55,58,59,60,61,62,63,66,70,71,72,73,75,78,81,92,94,99,112,115,117,118,123,124,125,128,130,131,132,],[-51,9,-4,-15,-16,-41,-44,-46,-47,-48,-49,-50,-51,-17,-18,-19,-20,-28,-51,-24,-25,-26,-27,-45,-39,-40,-42,-43,-51,-2,-51,-31,9,-3,-29,-51,-51,-32,-12,-51,-14,-51,-13,-30,-9,]),'PRINT':([2,3,6,20,21,22,23,24,25,26,27,28,51,52,53,54,55,58,59,60,61,62,63,66,70,71,72,73,75,78,81,92,94,99,112,115,117,118,123,124,125,128,130,131,132,],[-51,10,-4,-15,-16,-41,-44,-46,-47,-48,-49,-50,-51,-17,-18,-19,-20,-28,-51,-24,-25,-26,-27,-45,-39,-40,-42,-43,-51,-2,-51,-31,10,-3,-29,-51,-51,-32,-12,-51,-14,-51,-13,-30,-9,]),'IF':([2,3,6,7,11,20,21,22,23,24,25,26,27,28,38,51,52,53,54,55,58,59,60,61,62,63,66,70,71,72,73,75,76,77,78,81,89,92,94,95,96,99,100,111,112,115,117,118,123,124,125,126,128,129,130,131,132,],[-51,-51,-4,15,-8,-15,-16,-41,-44,-46,-47,-48,-49,-50,15,-51,-17,-18,-19,-20,-28,-51,-24,-25,-26,-27,-45,-39,-40,-42,-43,-51,15,15,-2,15,15,-31,-51,-6,-7,-3,15,15,-29,15,15,-32,-12,15,-14,-5,15,15,-13,-30,-9,]),'WHILE':([2,3,6,7,11,20,21,22,23,24,25,26,27,28,38,51,52,53,54,55,58,59,60,61,62,63,66,68,70,71,72,73,75,76,77,78,81,89,92,94,95,96,99,100,111,112,115,117,118,123,124,125,126,128,129,130,131,132,],[-51,-51,-4,17,-8,-15,-16,-41,-44,-46,-47,-48,-49,-50,17,-51,-17,-18,-19,-20,-28,-51,-24,-25,-26,-27,-45,90,-39,-40,-42,-43,-51,17,17,-2,17,17,-31,-51,-6,-7,-3,17,17,-29,17,17,-32,-12,17,-14,-5,17,17,-13,-30,-9,]),'DO':([2,3,6,7,11,20,21,22,23,24,25,26,27,28,38,51,52,53,54,55,58,59,60,61,62,63,66,70,71,72,73,75,76,77,78,81,89,92,94,95,96,99,100,111,112,115,117,118,123,124,125,126,128,129,130,131,132,],[-51,-51,-4,18,-8,-15,-16,-41,-44,-46,-47,-48,-49,-50,18,-51,-17,-18,-19,-20,-28,-51,-24,-25,-26,-27,-45,-39,-40,-42,-43,-51,18,18,-2,18,18,-31,-51,-6,-7,-3,18,18,-29,18,18,-32,-12,18,-14,-5,18,18,-13,-30,-9,]),'FOR':([2,3,6,7,11,20,21,22,23,24,25,26,27,28,38,51,52,53,54,55,58,59,60,61,62,63,66,70,71,72,73,75,76,77,78,81,89,92,94,95,96,99,100,111,112,115,117,118,123,124,125,126,128,129,130,131,132,],[-51,-51,-4,19,-8,-15,-16,-41,-44,-46,-47,-48,-49,-50,19,-51,-17,-18,-19,-20,-28,-51,-24,-25,-26,-27,-45,-39,-40,-42,-43,-51,19,19,-2,19,19,-31,-51,-6,-7,-3,19,19,-29,19,19,-32,-12,19,-14,-5,19,19,-13,-30,-9,]),'LPAREN':([2,3,6,7,8,9,10,11,15,16,17,19,20,21,22,23,24,25,26,27,28,38,40,41,42,43,51,52,53,54,55,58,59,60,61,62,63,66,70,71,72,73,75,76,77,78,81,89,90,92,94,95,96,99,100,111,112,115,117,118,123,124,125,126,128,129,130,131,132,],[-51,-51,-4,16,29,30,31,-8,35,16,37,39,-15,-16,-41,-44,-46,-47,-48,-49,-50,16,16,16,16,16,-51,-17,-18,-19,-20,-28,-51,-24,-25,-26,-27,-45,-39,-40,-42,-43,-51,16,16,-2,16,16,108,-31,-51,-6,-7,-3,16,16,-29,16,16,-32,-12,16,-14,-5,16,16,-13,-30,-9,]),'NINT':([2,3,6,7,11,16,20,21,22,23,24,25,26,27,28,30,31,33,35,37,38,39,40,41,42,43,44,51,52,53,54,55,58,59,60,61,62,63,66,70,71,72,73,75,76,77,78,79,80,81,83,84,85,86,87,88,89,91,92,93,94,95,96,99,100,108,111,112,115,117,118,120,123,124,125,126,128,129,130,131,132,],[-51,-51,-4,24,-8,24,-15,-16,-41,-44,-46,-47,-48,-49,-50,48,48,60,60,60,24,60,24,24,24,24,48,-51,-17,-18,-19,-20,-28,-51,-24,-25,-26,-27,-45,-39,-40,-42,-43,-51,24,24,-2,60,60,24,60,60,60,60,60,60,24,60,-31,48,-51,-6,-7,-3,24,60,24,-29,24,24,-32,60,-12,24,-14,-5,24,24,-13,-30,-9,]),'NFLOAT':([2,3,6,7,11,16,20,21,22,23,24,25,26,27,28,30,31,33,35,37,38,39,40,41,42,43,44,51,52,53,54,55,58,59,60,61,62,63,66,70,71,72,73,75,76,77,78,79,80,81,83,84,85,86,87,88,89,91,92,93,94,95,96,99,100,108,111,112,115,117,118,120,123,124,125,126,128,129,130,131,132,],[-51,-51,-4,25,-8,25,-15,-16,-41,-44,-46,-47,-48,-49,-50,49,49,61,61,61,25,61,25,25,25,25,49,-51,-17,-18,-19,-20,-28,-51,-24,-25,-26,-27,-45,-39,-40,-42,-43,-51,25,25,-2,61,61,25,61,61,61,61,61,61,25,61,-31,49,-51,-6,-7,-3,25,61,25,-29,25,25,-32,61,-12,25,-14,-5,25,25,-13,-30,-9,]),'ID':([2,3,4,5,6,7,11,16,20,21,22,23,24,25,26,27,28,29,30,31,33,35,37,38,39,40,41,42,43,44,51,52,53,54,55,58,59,60,61,62,63,66,70,71,72,73,75,76,77,78,79,80,81,83,84,85,86,87,88,89,91,92,93,94,95,96,99,100,108,111,112,115,117,118,120,123,124,125,126,128,129,130,131,132,],[-51,-51,12,13,-4,28,-8,28,-15,-16,-41,-44,-46,-47,-48,-49,-50,45,47,47,58,58,58,28,58,28,28,28,28,47,-51,-17,-18,-19,-20,-28,-51,-24,-25,-26,-27,-45,-39,-40,-42,-43,-51,28,28,-2,58,58,28,58,58,58,58,58,58,28,58,-31,47,-51,-6,-7,-3,28,58,28,-29,28,28,-32,58,-12,28,-14,-5,28,28,-13,-30,-9,]),'PEND':([2,3,6,7,11,14,20,21,22,23,24,25,26,27,28,51,52,53,54,55,58,59,60,61,62,63,66,70,71,72,73,76,77,78,81,92,95,96,99,112,115,117,118,123,124,125,126,128,130,131,132,],[-51,-51,-4,-51,-8,34,-15,-16,-41,-44,-46,-47,-48,-49,-50,-51,-17,-18,-19,-20,-28,-51,-24,-25,-26,-27,-45,-39,-40,-42,-43,-51,-51,-2,-51,-31,-6,-7,-3,-29,-51,-51,-32,-12,-51,-14,-5,-51,-13,-30,-9,]),'END':([6,11,20,21,22,23,24,25,26,27,28,51,52,53,54,55,58,59,60,61,62,63,66,70,71,72,73,75,76,77,78,81,92,94,95,96,99,100,111,112,114,115,117,118,119,121,123,124,125,126,128,129,130,131,132,133,],[-4,-8,-15,-16,-41,-44,-46,-47,-48,-49,-50,-51,-17,-18,-19,-20,-28,-51,-24,-25,-26,-27,-45,-39,-40,-42,-43,-51,-51,-51,-2,-51,-31,-51,-6,-7,-3,-51,-51,-29,-11,-51,-51,-32,126,128,-12,-51,-14,-5,-51,-51,-13,-30,-9,-10,]),'AS':([12,],[32,]),'EQUAL':([13,],[33,]),'COLON':([18,],[38,]),'WEND':([20,21,22,23,24,25,26,27,28,66,70,71,72,73,89,92,107,115,117,118,123,124,125,128,130,132,],[-15,-16,-41,-44,-46,-47,-48,-49,-50,-45,-39,-40,-42,-43,-51,-31,115,-51,-51,-32,-12,-51,-14,-51,-13,-9,]),'ELSE':([20,21,22,23,24,25,26,27,28,66,70,71,72,73,92,100,114,115,117,118,123,124,125,128,130,132,],[-15,-16,-41,-44,-46,-47,-48,-49,-50,-45,-39,-40,-42,-43,-31,-51,122,-51,-51,-32,-12,-51,-14,-51,-13,-9,]),'PLUS':([20,22,23,24,25,26,27,28,36,66,70,71,72,73,92,118,],[40,-41,-44,-46,-47,-48,-49,-50,40,-45,-39,-40,-42,-43,-31,-32,]),'MINUS':([20,22,23,24,25,26,27,28,36,66,70,71,72,73,92,118,],[41,-41,-44,-46,-47,-48,-49,-50,41,-45,-39,-40,-42,-43,-31,-32,]),'RPAREN':([22,23,24,25,26,27,28,36,45,46,47,48,49,50,58,60,61,62,63,64,66,67,70,71,72,73,92,101,102,103,104,105,106,109,116,118,],[-41,-44,-46,-47,-48,-49,-50,66,75,76,-21,-22,-23,77,-28,-24,-25,-26,-27,82,-45,89,-39,-40,-42,-43,-31,-33,-34,-35,-36,-37,-38,117,124,-32,]),'MULT':([22,23,24,25,26,27,28,66,70,71,72,73,92,118,],[42,-44,-46,-47,-48,-49,-50,-45,42,42,-42,-43,-31,-32,]),'DIV':([22,23,24,25,26,27,28,66,70,71,72,73,92,118,],[43,-44,-46,-47,-48,-49,-50,-45,43,43,-42,-43,-31,-32,]),'LBRACK':([28,56,57,58,113,],[44,79,80,44,120,]),'INT':([32,],[52,]),'FLOAT':([32,],[53,]),'VEC':([32,],[56,]),'MAT':([32,],[57,]),'RBRACK':([47,48,49,58,60,61,62,63,74,92,97,98,110,118,127,],[-21,-22,-23,-28,-24,-25,-26,-27,92,-31,112,113,118,-32,131,]),'COMMA':([47,48,49,58,60,61,62,63,69,74,92,101,102,103,104,105,106,118,],[-21,-22,-23,-28,-24,-25,-26,-27,91,93,-31,-33,-34,-35,-36,-37,-38,-32,]),'LT':([58,60,61,62,63,65,92,118,],[-28,-24,-25,-26,-27,83,-31,-32,]),'LE':([58,60,61,62,63,65,92,118,],[-28,-24,-25,-26,-27,84,-31,-32,]),'GT':([58,60,61,62,63,65,92,118,],[-28,-24,-25,-26,-27,85,-31,-32,]),'GE':([58,60,61,62,63,65,92,118,],[-28,-24,-25,-26,-27,86,-31,-32,]),'EQ':([58,60,61,62,63,65,92,118,],[-28,-24,-25,-26,-27,87,-31,-32,]),'NE':([58,60,61,62,63,65,92,118,],[-28,-24,-25,-26,-27,88,-31,-32,]),'THEN':([82,122,],[100,129,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'START':([0,],[1,]),'V':([2,51,59,75,],[3,78,81,94,]),'EMPTY':([2,3,7,38,51,59,75,76,77,81,89,94,100,111,115,117,124,128,129,],[6,11,21,21,6,6,6,21,21,21,21,11,21,21,21,21,21,21,21,]),'P':([3,94,],[7,111,]),'S':([7,38,76,77,81,89,100,111,115,117,124,128,129,],[14,68,95,96,99,107,114,119,123,125,130,132,133,]),'E':([7,16,38,76,77,81,89,100,111,115,117,124,128,129,],[20,36,20,20,20,20,20,20,20,20,20,20,20,20,]),'T':([7,16,38,40,41,76,77,81,89,100,111,115,117,124,128,129,],[22,22,22,70,71,22,22,22,22,22,22,22,22,22,22,22,]),'F':([7,16,38,40,41,42,43,76,77,81,89,100,111,115,117,124,128,129,],[23,23,23,23,23,72,73,23,23,23,23,23,23,23,23,23,23,23,]),'VECTOR':([7,16,33,35,37,38,39,40,41,42,43,76,77,79,80,81,83,84,85,86,87,88,89,91,100,108,111,115,117,120,124,128,129,],[26,26,62,62,62,26,62,26,26,26,26,26,26,62,62,26,62,62,62,62,62,62,26,62,26,62,26,26,26,62,26,26,26,]),'MATRIX':([7,16,33,35,37,38,39,40,41,42,43,76,77,79,80,81,83,84,85,86,87,88,89,91,100,108,111,115,117,120,124,128,129,],[27,27,63,63,63,27,63,27,27,27,27,27,27,63,63,27,63,63,63,63,63,63,27,63,27,63,27,27,27,63,27,27,27,]),'NUMTYPE':([30,31,44,93,],[46,50,74,110,]),'VARTYPE':([32,],[51,]),'VECDEF':([32,],[54,]),'MATDEF':([32,],[55,]),'VAR':([33,35,37,39,79,80,83,84,85,86,87,88,91,108,120,],[59,65,65,65,97,98,101,102,103,104,105,106,65,65,127,]),'RELEXPR':([35,37,39,91,108,],[64,67,69,109,116,]),'IFELSE':([114,],[121,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> START","S'",1,None,None,None),
  ('START -> PROGRAM V P S PEND','START',5,'p_START','nebulaSyn.py',22),
  ('V -> DIM ID AS VARTYPE V','V',5,'p_V_DIM','nebulaSyn.py',30),
  ('V -> LET ID EQUAL VAR V S','V',6,'p_V_LET','nebulaSyn.py',35),
  ('V -> EMPTY','V',1,'p_V_EMPTY','nebulaSyn.py',40),
  ('P -> SUBPROCEDURE LPAREN ID RPAREN V P S END','P',8,'p_P_SUB','nebulaSyn.py',47),
  ('P -> IN LPAREN NUMTYPE RPAREN S','P',5,'p_P_INP','nebulaSyn.py',52),
  ('P -> PRINT LPAREN NUMTYPE RPAREN S','P',5,'p_P_PRINT','nebulaSyn.py',57),
  ('P -> EMPTY','P',1,'p_P_EMPTY','nebulaSyn.py',62),
  ('S -> IF LPAREN RELEXPR RPAREN THEN S IFELSE END S','S',9,'p_S_IF','nebulaSyn.py',69),
  ('IFELSE -> ELSE THEN S','IFELSE',3,'p_S_IFELSE','nebulaSyn.py',74),
  ('IFELSE -> <empty>','IFELSE',0,'p_S_IFELSE','nebulaSyn.py',75),
  ('S -> WHILE LPAREN RELEXPR RPAREN S WEND S','S',7,'p_S_WHILE','nebulaSyn.py',80),
  ('S -> DO COLON S WHILE LPAREN RELEXPR RPAREN S','S',8,'p_S_DO','nebulaSyn.py',85),
  ('S -> FOR LPAREN RELEXPR COMMA RELEXPR RPAREN S','S',7,'p_S_FOR','nebulaSyn.py',90),
  ('S -> E','S',1,'p_S_OPERATION','nebulaSyn.py',95),
  ('S -> EMPTY','S',1,'p_S_EMPTY','nebulaSyn.py',100),
  ('VARTYPE -> INT','VARTYPE',1,'p_VARTYPE','nebulaSyn.py',107),
  ('VARTYPE -> FLOAT','VARTYPE',1,'p_VARTYPE','nebulaSyn.py',108),
  ('VARTYPE -> VECDEF','VARTYPE',1,'p_VARTYPE','nebulaSyn.py',109),
  ('VARTYPE -> MATDEF','VARTYPE',1,'p_VARTYPE','nebulaSyn.py',110),
  ('NUMTYPE -> ID','NUMTYPE',1,'p_NUMTYPE','nebulaSyn.py',115),
  ('NUMTYPE -> NINT','NUMTYPE',1,'p_NUMTYPE','nebulaSyn.py',116),
  ('NUMTYPE -> NFLOAT','NUMTYPE',1,'p_NUMTYPE','nebulaSyn.py',117),
  ('VAR -> NINT','VAR',1,'p_VAR','nebulaSyn.py',122),
  ('VAR -> NFLOAT','VAR',1,'p_VAR','nebulaSyn.py',123),
  ('VAR -> VECTOR','VAR',1,'p_VAR','nebulaSyn.py',124),
  ('VAR -> MATRIX','VAR',1,'p_VAR','nebulaSyn.py',125),
  ('VAR -> ID','VAR',1,'p_VAR','nebulaSyn.py',126),
  ('VECDEF -> VEC LBRACK VAR RBRACK','VECDEF',4,'p_VECDEF','nebulaSyn.py',131),
  ('MATDEF -> MAT LBRACK VAR RBRACK LBRACK VAR RBRACK','MATDEF',7,'p_MATDEF','nebulaSyn.py',136),
  ('VECTOR -> ID LBRACK NUMTYPE RBRACK','VECTOR',4,'p_VECTOR','nebulaSyn.py',141),
  ('MATRIX -> ID LBRACK NUMTYPE COMMA NUMTYPE RBRACK','MATRIX',6,'p_MATRIX','nebulaSyn.py',146),
  ('RELEXPR -> VAR LT VAR','RELEXPR',3,'p_RELEXPR','nebulaSyn.py',151),
  ('RELEXPR -> VAR LE VAR','RELEXPR',3,'p_RELEXPR','nebulaSyn.py',152),
  ('RELEXPR -> VAR GT VAR','RELEXPR',3,'p_RELEXPR','nebulaSyn.py',153),
  ('RELEXPR -> VAR GE VAR','RELEXPR',3,'p_RELEXPR','nebulaSyn.py',154),
  ('RELEXPR -> VAR EQ VAR','RELEXPR',3,'p_RELEXPR','nebulaSyn.py',155),
  ('RELEXPR -> VAR NE VAR','RELEXPR',3,'p_RELEXPR','nebulaSyn.py',156),
  ('E -> E PLUS T','E',3,'p_E','nebulaSyn.py',161),
  ('E -> E MINUS T','E',3,'p_E','nebulaSyn.py',162),
  ('E -> T','E',1,'p_E1','nebulaSyn.py',167),
  ('T -> T MULT F','T',3,'p_T','nebulaSyn.py',172),
  ('T -> T DIV F','T',3,'p_T','nebulaSyn.py',173),
  ('T -> F','T',1,'p_T1','nebulaSyn.py',178),
  ('F -> LPAREN E RPAREN','F',3,'p_F','nebulaSyn.py',183),
  ('F -> NINT','F',1,'p_FVAR','nebulaSyn.py',188),
  ('F -> NFLOAT','F',1,'p_FVAR','nebulaSyn.py',189),
  ('F -> VECTOR','F',1,'p_FVAR','nebulaSyn.py',190),
  ('F -> MATRIX','F',1,'p_FVAR','nebulaSyn.py',191),
  ('F -> ID','F',1,'p_FVAR','nebulaSyn.py',192),
  ('EMPTY -> <empty>','EMPTY',0,'p_EMPTY','nebulaSyn.py',197),
]
