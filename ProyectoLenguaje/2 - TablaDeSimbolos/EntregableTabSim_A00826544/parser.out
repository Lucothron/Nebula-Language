Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    COMMENT
    ENDIF
    GOSUB
    LOOP
    NEXT
    NOT
    OR
    POWER
    SUBEND

Grammar

Rule 0     S' -> START
Rule 1     START -> PROGRAM V P S PEND
Rule 2     V -> DIM ID AS VARTYPE V
Rule 3     V -> LET ID EQUAL VAR V S
Rule 4     V -> EMPTY
Rule 5     P -> SUBPROCEDURE LPAREN ID RPAREN V P S END
Rule 6     P -> IN LPAREN NUMTYPE RPAREN S
Rule 7     P -> PRINT LPAREN NUMTYPE RPAREN S
Rule 8     P -> EMPTY
Rule 9     S -> IF LPAREN RELEXPR RPAREN THEN S IFELSE END S
Rule 10    IFELSE -> ELSE THEN S
Rule 11    IFELSE -> <empty>
Rule 12    S -> WHILE LPAREN RELEXPR RPAREN S WEND S
Rule 13    S -> DO COLON S WHILE LPAREN RELEXPR RPAREN S
Rule 14    S -> FOR LPAREN RELEXPR RPAREN S END S
Rule 15    S -> O
Rule 16    S -> EMPTY
Rule 17    VARTYPE -> INT
Rule 18    VARTYPE -> FLOAT
Rule 19    VARTYPE -> VECDEF
Rule 20    VARTYPE -> MATDEF
Rule 21    NUMTYPE -> ID
Rule 22    NUMTYPE -> NINT
Rule 23    NUMTYPE -> NFLOAT
Rule 24    VAR -> NINT
Rule 25    VAR -> NFLOAT
Rule 26    VAR -> VECTOR
Rule 27    VAR -> MATRIX
Rule 28    VAR -> ID
Rule 29    VECDEF -> VEC LBRACK RBRACK
Rule 30    MATDEF -> MAT LBRACK RBRACK
Rule 31    VECTOR -> LBRACK NUMTYPE RBRACK
Rule 32    MATRIX -> LBRACK NUMTYPE COMMA NUMTYPE RBRACK
Rule 33    RELEXPR -> VAR LT VAR
Rule 34    RELEXPR -> VAR LE VAR
Rule 35    RELEXPR -> VAR GT VAR
Rule 36    RELEXPR -> VAR GE VAR
Rule 37    RELEXPR -> VAR EQ VAR
Rule 38    RELEXPR -> VAR NE VAR
Rule 39    O -> O EQUAL O
Rule 40    O -> O PLUS TIER1
Rule 41    O -> O MINUS TIER1
Rule 42    TIER1 -> TIER1 MULT TIER2
Rule 43    TIER1 -> TIER1 DIV TIER2
Rule 44    TIER2 -> LPAREN O RPAREN
Rule 45    O -> TIER1
Rule 46    TIER1 -> TIER2
Rule 47    TIER2 -> VAR
Rule 48    EMPTY -> <empty>

Terminals, with rules where they appear

AND                  : 
AS                   : 2
COLON                : 13
COMMA                : 32
COMMENT              : 
DIM                  : 2
DIV                  : 43
DO                   : 13
ELSE                 : 10
END                  : 5 9 14
ENDIF                : 
EQ                   : 37
EQUAL                : 3 39
FLOAT                : 18
FOR                  : 14
GE                   : 36
GOSUB                : 
GT                   : 35
ID                   : 2 3 5 21 28
IF                   : 9
IN                   : 6
INT                  : 17
LBRACK               : 29 30 31 32
LE                   : 34
LET                  : 3
LOOP                 : 
LPAREN               : 5 6 7 9 12 13 14 44
LT                   : 33
MAT                  : 30
MINUS                : 41
MULT                 : 42
NE                   : 38
NEXT                 : 
NFLOAT               : 23 25
NINT                 : 22 24
NOT                  : 
OR                   : 
PEND                 : 1
PLUS                 : 40
POWER                : 
PRINT                : 7
PROGRAM              : 1
RBRACK               : 29 30 31 32
RPAREN               : 5 6 7 9 12 13 14 44
SUBEND               : 
SUBPROCEDURE         : 5
THEN                 : 9 10
VEC                  : 29
WEND                 : 12
WHILE                : 12 13
error                : 

Nonterminals, with rules where they appear

EMPTY                : 4 8 16
IFELSE               : 9
MATDEF               : 20
MATRIX               : 27
NUMTYPE              : 6 7 31 32 32
O                    : 15 39 39 40 41 44
P                    : 1 5
RELEXPR              : 9 12 13 14
S                    : 1 3 5 6 7 9 9 10 12 12 13 13 14 14
START                : 0
TIER1                : 40 41 42 43 45
TIER2                : 42 43 46
V                    : 1 2 3 5
VAR                  : 3 33 33 34 34 35 35 36 36 37 37 38 38 47
VARTYPE              : 2
VECDEF               : 19
VECTOR               : 26

Parsing method: LALR

state 0

    (0) S' -> . START
    (1) START -> . PROGRAM V P S PEND

    PROGRAM         shift and go to state 2

    START                          shift and go to state 1

state 1

    (0) S' -> START .



state 2

    (1) START -> PROGRAM . V P S PEND
    (2) V -> . DIM ID AS VARTYPE V
    (3) V -> . LET ID EQUAL VAR V S
    (4) V -> . EMPTY
    (48) EMPTY -> .

    DIM             shift and go to state 4
    LET             shift and go to state 5
    SUBPROCEDURE    reduce using rule 48 (EMPTY -> .)
    IN              reduce using rule 48 (EMPTY -> .)
    PRINT           reduce using rule 48 (EMPTY -> .)
    IF              reduce using rule 48 (EMPTY -> .)
    WHILE           reduce using rule 48 (EMPTY -> .)
    DO              reduce using rule 48 (EMPTY -> .)
    FOR             reduce using rule 48 (EMPTY -> .)
    LPAREN          reduce using rule 48 (EMPTY -> .)
    NINT            reduce using rule 48 (EMPTY -> .)
    NFLOAT          reduce using rule 48 (EMPTY -> .)
    ID              reduce using rule 48 (EMPTY -> .)
    LBRACK          reduce using rule 48 (EMPTY -> .)
    PEND            reduce using rule 48 (EMPTY -> .)

    V                              shift and go to state 3
    EMPTY                          shift and go to state 6

state 3

    (1) START -> PROGRAM V . P S PEND
    (5) P -> . SUBPROCEDURE LPAREN ID RPAREN V P S END
    (6) P -> . IN LPAREN NUMTYPE RPAREN S
    (7) P -> . PRINT LPAREN NUMTYPE RPAREN S
    (8) P -> . EMPTY
    (48) EMPTY -> .

    SUBPROCEDURE    shift and go to state 8
    IN              shift and go to state 9
    PRINT           shift and go to state 10
    IF              reduce using rule 48 (EMPTY -> .)
    WHILE           reduce using rule 48 (EMPTY -> .)
    DO              reduce using rule 48 (EMPTY -> .)
    FOR             reduce using rule 48 (EMPTY -> .)
    LPAREN          reduce using rule 48 (EMPTY -> .)
    NINT            reduce using rule 48 (EMPTY -> .)
    NFLOAT          reduce using rule 48 (EMPTY -> .)
    ID              reduce using rule 48 (EMPTY -> .)
    LBRACK          reduce using rule 48 (EMPTY -> .)
    PEND            reduce using rule 48 (EMPTY -> .)

    P                              shift and go to state 7
    EMPTY                          shift and go to state 11

state 4

    (2) V -> DIM . ID AS VARTYPE V

    ID              shift and go to state 12


state 5

    (3) V -> LET . ID EQUAL VAR V S

    ID              shift and go to state 13


state 6

    (4) V -> EMPTY .

    SUBPROCEDURE    reduce using rule 4 (V -> EMPTY .)
    IN              reduce using rule 4 (V -> EMPTY .)
    PRINT           reduce using rule 4 (V -> EMPTY .)
    IF              reduce using rule 4 (V -> EMPTY .)
    WHILE           reduce using rule 4 (V -> EMPTY .)
    DO              reduce using rule 4 (V -> EMPTY .)
    FOR             reduce using rule 4 (V -> EMPTY .)
    LPAREN          reduce using rule 4 (V -> EMPTY .)
    NINT            reduce using rule 4 (V -> EMPTY .)
    NFLOAT          reduce using rule 4 (V -> EMPTY .)
    ID              reduce using rule 4 (V -> EMPTY .)
    LBRACK          reduce using rule 4 (V -> EMPTY .)
    PEND            reduce using rule 4 (V -> EMPTY .)
    END             reduce using rule 4 (V -> EMPTY .)


state 7

    (1) START -> PROGRAM V P . S PEND
    (9) S -> . IF LPAREN RELEXPR RPAREN THEN S IFELSE END S
    (12) S -> . WHILE LPAREN RELEXPR RPAREN S WEND S
    (13) S -> . DO COLON S WHILE LPAREN RELEXPR RPAREN S
    (14) S -> . FOR LPAREN RELEXPR RPAREN S END S
    (15) S -> . O
    (16) S -> . EMPTY
    (39) O -> . O EQUAL O
    (40) O -> . O PLUS TIER1
    (41) O -> . O MINUS TIER1
    (45) O -> . TIER1
    (48) EMPTY -> .
    (42) TIER1 -> . TIER1 MULT TIER2
    (43) TIER1 -> . TIER1 DIV TIER2
    (46) TIER1 -> . TIER2
    (44) TIER2 -> . LPAREN O RPAREN
    (47) TIER2 -> . VAR
    (24) VAR -> . NINT
    (25) VAR -> . NFLOAT
    (26) VAR -> . VECTOR
    (27) VAR -> . MATRIX
    (28) VAR -> . ID
    (31) VECTOR -> . LBRACK NUMTYPE RBRACK
    (32) MATRIX -> . LBRACK NUMTYPE COMMA NUMTYPE RBRACK

    IF              shift and go to state 15
    WHILE           shift and go to state 17
    DO              shift and go to state 18
    FOR             shift and go to state 19
    PEND            reduce using rule 48 (EMPTY -> .)
    LPAREN          shift and go to state 16
    NINT            shift and go to state 25
    NFLOAT          shift and go to state 26
    ID              shift and go to state 29
    LBRACK          shift and go to state 30

    S                              shift and go to state 14
    O                              shift and go to state 20
    EMPTY                          shift and go to state 21
    TIER1                          shift and go to state 22
    TIER2                          shift and go to state 23
    VAR                            shift and go to state 24
    VECTOR                         shift and go to state 27
    MATRIX                         shift and go to state 28

state 8

    (5) P -> SUBPROCEDURE . LPAREN ID RPAREN V P S END

    LPAREN          shift and go to state 31


state 9

    (6) P -> IN . LPAREN NUMTYPE RPAREN S

    LPAREN          shift and go to state 32


state 10

    (7) P -> PRINT . LPAREN NUMTYPE RPAREN S

    LPAREN          shift and go to state 33


state 11

    (8) P -> EMPTY .

    IF              reduce using rule 8 (P -> EMPTY .)
    WHILE           reduce using rule 8 (P -> EMPTY .)
    DO              reduce using rule 8 (P -> EMPTY .)
    FOR             reduce using rule 8 (P -> EMPTY .)
    LPAREN          reduce using rule 8 (P -> EMPTY .)
    NINT            reduce using rule 8 (P -> EMPTY .)
    NFLOAT          reduce using rule 8 (P -> EMPTY .)
    ID              reduce using rule 8 (P -> EMPTY .)
    LBRACK          reduce using rule 8 (P -> EMPTY .)
    PEND            reduce using rule 8 (P -> EMPTY .)
    END             reduce using rule 8 (P -> EMPTY .)


state 12

    (2) V -> DIM ID . AS VARTYPE V

    AS              shift and go to state 34


state 13

    (3) V -> LET ID . EQUAL VAR V S

    EQUAL           shift and go to state 35


state 14

    (1) START -> PROGRAM V P S . PEND

    PEND            shift and go to state 36


state 15

    (9) S -> IF . LPAREN RELEXPR RPAREN THEN S IFELSE END S

    LPAREN          shift and go to state 37


state 16

    (44) TIER2 -> LPAREN . O RPAREN
    (39) O -> . O EQUAL O
    (40) O -> . O PLUS TIER1
    (41) O -> . O MINUS TIER1
    (45) O -> . TIER1
    (42) TIER1 -> . TIER1 MULT TIER2
    (43) TIER1 -> . TIER1 DIV TIER2
    (46) TIER1 -> . TIER2
    (44) TIER2 -> . LPAREN O RPAREN
    (47) TIER2 -> . VAR
    (24) VAR -> . NINT
    (25) VAR -> . NFLOAT
    (26) VAR -> . VECTOR
    (27) VAR -> . MATRIX
    (28) VAR -> . ID
    (31) VECTOR -> . LBRACK NUMTYPE RBRACK
    (32) MATRIX -> . LBRACK NUMTYPE COMMA NUMTYPE RBRACK

    LPAREN          shift and go to state 16
    NINT            shift and go to state 25
    NFLOAT          shift and go to state 26
    ID              shift and go to state 29
    LBRACK          shift and go to state 30

    O                              shift and go to state 38
    TIER1                          shift and go to state 22
    TIER2                          shift and go to state 23
    VAR                            shift and go to state 24
    VECTOR                         shift and go to state 27
    MATRIX                         shift and go to state 28

state 17

    (12) S -> WHILE . LPAREN RELEXPR RPAREN S WEND S

    LPAREN          shift and go to state 39


state 18

    (13) S -> DO . COLON S WHILE LPAREN RELEXPR RPAREN S

    COLON           shift and go to state 40


state 19

    (14) S -> FOR . LPAREN RELEXPR RPAREN S END S

    LPAREN          shift and go to state 41


state 20

    (15) S -> O .
    (39) O -> O . EQUAL O
    (40) O -> O . PLUS TIER1
    (41) O -> O . MINUS TIER1

    PEND            reduce using rule 15 (S -> O .)
    WHILE           reduce using rule 15 (S -> O .)
    IF              reduce using rule 15 (S -> O .)
    DO              reduce using rule 15 (S -> O .)
    FOR             reduce using rule 15 (S -> O .)
    LPAREN          reduce using rule 15 (S -> O .)
    NINT            reduce using rule 15 (S -> O .)
    NFLOAT          reduce using rule 15 (S -> O .)
    ID              reduce using rule 15 (S -> O .)
    LBRACK          reduce using rule 15 (S -> O .)
    END             reduce using rule 15 (S -> O .)
    SUBPROCEDURE    reduce using rule 15 (S -> O .)
    IN              reduce using rule 15 (S -> O .)
    PRINT           reduce using rule 15 (S -> O .)
    WEND            reduce using rule 15 (S -> O .)
    ELSE            reduce using rule 15 (S -> O .)
    EQUAL           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44


state 21

    (16) S -> EMPTY .

    PEND            reduce using rule 16 (S -> EMPTY .)
    WHILE           reduce using rule 16 (S -> EMPTY .)
    IF              reduce using rule 16 (S -> EMPTY .)
    DO              reduce using rule 16 (S -> EMPTY .)
    FOR             reduce using rule 16 (S -> EMPTY .)
    LPAREN          reduce using rule 16 (S -> EMPTY .)
    NINT            reduce using rule 16 (S -> EMPTY .)
    NFLOAT          reduce using rule 16 (S -> EMPTY .)
    ID              reduce using rule 16 (S -> EMPTY .)
    LBRACK          reduce using rule 16 (S -> EMPTY .)
    END             reduce using rule 16 (S -> EMPTY .)
    SUBPROCEDURE    reduce using rule 16 (S -> EMPTY .)
    IN              reduce using rule 16 (S -> EMPTY .)
    PRINT           reduce using rule 16 (S -> EMPTY .)
    WEND            reduce using rule 16 (S -> EMPTY .)
    ELSE            reduce using rule 16 (S -> EMPTY .)


state 22

    (45) O -> TIER1 .
    (42) TIER1 -> TIER1 . MULT TIER2
    (43) TIER1 -> TIER1 . DIV TIER2

    EQUAL           reduce using rule 45 (O -> TIER1 .)
    PLUS            reduce using rule 45 (O -> TIER1 .)
    MINUS           reduce using rule 45 (O -> TIER1 .)
    PEND            reduce using rule 45 (O -> TIER1 .)
    RPAREN          reduce using rule 45 (O -> TIER1 .)
    WHILE           reduce using rule 45 (O -> TIER1 .)
    IF              reduce using rule 45 (O -> TIER1 .)
    DO              reduce using rule 45 (O -> TIER1 .)
    FOR             reduce using rule 45 (O -> TIER1 .)
    LPAREN          reduce using rule 45 (O -> TIER1 .)
    NINT            reduce using rule 45 (O -> TIER1 .)
    NFLOAT          reduce using rule 45 (O -> TIER1 .)
    ID              reduce using rule 45 (O -> TIER1 .)
    LBRACK          reduce using rule 45 (O -> TIER1 .)
    END             reduce using rule 45 (O -> TIER1 .)
    SUBPROCEDURE    reduce using rule 45 (O -> TIER1 .)
    IN              reduce using rule 45 (O -> TIER1 .)
    PRINT           reduce using rule 45 (O -> TIER1 .)
    WEND            reduce using rule 45 (O -> TIER1 .)
    ELSE            reduce using rule 45 (O -> TIER1 .)
    MULT            shift and go to state 45
    DIV             shift and go to state 46


state 23

    (46) TIER1 -> TIER2 .

    MULT            reduce using rule 46 (TIER1 -> TIER2 .)
    DIV             reduce using rule 46 (TIER1 -> TIER2 .)
    EQUAL           reduce using rule 46 (TIER1 -> TIER2 .)
    PLUS            reduce using rule 46 (TIER1 -> TIER2 .)
    MINUS           reduce using rule 46 (TIER1 -> TIER2 .)
    PEND            reduce using rule 46 (TIER1 -> TIER2 .)
    RPAREN          reduce using rule 46 (TIER1 -> TIER2 .)
    WHILE           reduce using rule 46 (TIER1 -> TIER2 .)
    IF              reduce using rule 46 (TIER1 -> TIER2 .)
    DO              reduce using rule 46 (TIER1 -> TIER2 .)
    FOR             reduce using rule 46 (TIER1 -> TIER2 .)
    LPAREN          reduce using rule 46 (TIER1 -> TIER2 .)
    NINT            reduce using rule 46 (TIER1 -> TIER2 .)
    NFLOAT          reduce using rule 46 (TIER1 -> TIER2 .)
    ID              reduce using rule 46 (TIER1 -> TIER2 .)
    LBRACK          reduce using rule 46 (TIER1 -> TIER2 .)
    END             reduce using rule 46 (TIER1 -> TIER2 .)
    SUBPROCEDURE    reduce using rule 46 (TIER1 -> TIER2 .)
    IN              reduce using rule 46 (TIER1 -> TIER2 .)
    PRINT           reduce using rule 46 (TIER1 -> TIER2 .)
    WEND            reduce using rule 46 (TIER1 -> TIER2 .)
    ELSE            reduce using rule 46 (TIER1 -> TIER2 .)


state 24

    (47) TIER2 -> VAR .

    MULT            reduce using rule 47 (TIER2 -> VAR .)
    DIV             reduce using rule 47 (TIER2 -> VAR .)
    EQUAL           reduce using rule 47 (TIER2 -> VAR .)
    PLUS            reduce using rule 47 (TIER2 -> VAR .)
    MINUS           reduce using rule 47 (TIER2 -> VAR .)
    PEND            reduce using rule 47 (TIER2 -> VAR .)
    RPAREN          reduce using rule 47 (TIER2 -> VAR .)
    WHILE           reduce using rule 47 (TIER2 -> VAR .)
    IF              reduce using rule 47 (TIER2 -> VAR .)
    DO              reduce using rule 47 (TIER2 -> VAR .)
    FOR             reduce using rule 47 (TIER2 -> VAR .)
    LPAREN          reduce using rule 47 (TIER2 -> VAR .)
    NINT            reduce using rule 47 (TIER2 -> VAR .)
    NFLOAT          reduce using rule 47 (TIER2 -> VAR .)
    ID              reduce using rule 47 (TIER2 -> VAR .)
    LBRACK          reduce using rule 47 (TIER2 -> VAR .)
    END             reduce using rule 47 (TIER2 -> VAR .)
    SUBPROCEDURE    reduce using rule 47 (TIER2 -> VAR .)
    IN              reduce using rule 47 (TIER2 -> VAR .)
    PRINT           reduce using rule 47 (TIER2 -> VAR .)
    WEND            reduce using rule 47 (TIER2 -> VAR .)
    ELSE            reduce using rule 47 (TIER2 -> VAR .)


state 25

    (24) VAR -> NINT .

    MULT            reduce using rule 24 (VAR -> NINT .)
    DIV             reduce using rule 24 (VAR -> NINT .)
    EQUAL           reduce using rule 24 (VAR -> NINT .)
    PLUS            reduce using rule 24 (VAR -> NINT .)
    MINUS           reduce using rule 24 (VAR -> NINT .)
    PEND            reduce using rule 24 (VAR -> NINT .)
    RPAREN          reduce using rule 24 (VAR -> NINT .)
    DIM             reduce using rule 24 (VAR -> NINT .)
    LET             reduce using rule 24 (VAR -> NINT .)
    IF              reduce using rule 24 (VAR -> NINT .)
    WHILE           reduce using rule 24 (VAR -> NINT .)
    DO              reduce using rule 24 (VAR -> NINT .)
    FOR             reduce using rule 24 (VAR -> NINT .)
    LPAREN          reduce using rule 24 (VAR -> NINT .)
    NINT            reduce using rule 24 (VAR -> NINT .)
    NFLOAT          reduce using rule 24 (VAR -> NINT .)
    ID              reduce using rule 24 (VAR -> NINT .)
    LBRACK          reduce using rule 24 (VAR -> NINT .)
    SUBPROCEDURE    reduce using rule 24 (VAR -> NINT .)
    IN              reduce using rule 24 (VAR -> NINT .)
    PRINT           reduce using rule 24 (VAR -> NINT .)
    END             reduce using rule 24 (VAR -> NINT .)
    LT              reduce using rule 24 (VAR -> NINT .)
    LE              reduce using rule 24 (VAR -> NINT .)
    GT              reduce using rule 24 (VAR -> NINT .)
    GE              reduce using rule 24 (VAR -> NINT .)
    EQ              reduce using rule 24 (VAR -> NINT .)
    NE              reduce using rule 24 (VAR -> NINT .)
    WEND            reduce using rule 24 (VAR -> NINT .)
    ELSE            reduce using rule 24 (VAR -> NINT .)


state 26

    (25) VAR -> NFLOAT .

    MULT            reduce using rule 25 (VAR -> NFLOAT .)
    DIV             reduce using rule 25 (VAR -> NFLOAT .)
    EQUAL           reduce using rule 25 (VAR -> NFLOAT .)
    PLUS            reduce using rule 25 (VAR -> NFLOAT .)
    MINUS           reduce using rule 25 (VAR -> NFLOAT .)
    PEND            reduce using rule 25 (VAR -> NFLOAT .)
    RPAREN          reduce using rule 25 (VAR -> NFLOAT .)
    DIM             reduce using rule 25 (VAR -> NFLOAT .)
    LET             reduce using rule 25 (VAR -> NFLOAT .)
    IF              reduce using rule 25 (VAR -> NFLOAT .)
    WHILE           reduce using rule 25 (VAR -> NFLOAT .)
    DO              reduce using rule 25 (VAR -> NFLOAT .)
    FOR             reduce using rule 25 (VAR -> NFLOAT .)
    LPAREN          reduce using rule 25 (VAR -> NFLOAT .)
    NINT            reduce using rule 25 (VAR -> NFLOAT .)
    NFLOAT          reduce using rule 25 (VAR -> NFLOAT .)
    ID              reduce using rule 25 (VAR -> NFLOAT .)
    LBRACK          reduce using rule 25 (VAR -> NFLOAT .)
    SUBPROCEDURE    reduce using rule 25 (VAR -> NFLOAT .)
    IN              reduce using rule 25 (VAR -> NFLOAT .)
    PRINT           reduce using rule 25 (VAR -> NFLOAT .)
    END             reduce using rule 25 (VAR -> NFLOAT .)
    LT              reduce using rule 25 (VAR -> NFLOAT .)
    LE              reduce using rule 25 (VAR -> NFLOAT .)
    GT              reduce using rule 25 (VAR -> NFLOAT .)
    GE              reduce using rule 25 (VAR -> NFLOAT .)
    EQ              reduce using rule 25 (VAR -> NFLOAT .)
    NE              reduce using rule 25 (VAR -> NFLOAT .)
    WEND            reduce using rule 25 (VAR -> NFLOAT .)
    ELSE            reduce using rule 25 (VAR -> NFLOAT .)


state 27

    (26) VAR -> VECTOR .

    MULT            reduce using rule 26 (VAR -> VECTOR .)
    DIV             reduce using rule 26 (VAR -> VECTOR .)
    EQUAL           reduce using rule 26 (VAR -> VECTOR .)
    PLUS            reduce using rule 26 (VAR -> VECTOR .)
    MINUS           reduce using rule 26 (VAR -> VECTOR .)
    PEND            reduce using rule 26 (VAR -> VECTOR .)
    RPAREN          reduce using rule 26 (VAR -> VECTOR .)
    DIM             reduce using rule 26 (VAR -> VECTOR .)
    LET             reduce using rule 26 (VAR -> VECTOR .)
    IF              reduce using rule 26 (VAR -> VECTOR .)
    WHILE           reduce using rule 26 (VAR -> VECTOR .)
    DO              reduce using rule 26 (VAR -> VECTOR .)
    FOR             reduce using rule 26 (VAR -> VECTOR .)
    LPAREN          reduce using rule 26 (VAR -> VECTOR .)
    NINT            reduce using rule 26 (VAR -> VECTOR .)
    NFLOAT          reduce using rule 26 (VAR -> VECTOR .)
    ID              reduce using rule 26 (VAR -> VECTOR .)
    LBRACK          reduce using rule 26 (VAR -> VECTOR .)
    SUBPROCEDURE    reduce using rule 26 (VAR -> VECTOR .)
    IN              reduce using rule 26 (VAR -> VECTOR .)
    PRINT           reduce using rule 26 (VAR -> VECTOR .)
    END             reduce using rule 26 (VAR -> VECTOR .)
    LT              reduce using rule 26 (VAR -> VECTOR .)
    LE              reduce using rule 26 (VAR -> VECTOR .)
    GT              reduce using rule 26 (VAR -> VECTOR .)
    GE              reduce using rule 26 (VAR -> VECTOR .)
    EQ              reduce using rule 26 (VAR -> VECTOR .)
    NE              reduce using rule 26 (VAR -> VECTOR .)
    WEND            reduce using rule 26 (VAR -> VECTOR .)
    ELSE            reduce using rule 26 (VAR -> VECTOR .)


state 28

    (27) VAR -> MATRIX .

    MULT            reduce using rule 27 (VAR -> MATRIX .)
    DIV             reduce using rule 27 (VAR -> MATRIX .)
    EQUAL           reduce using rule 27 (VAR -> MATRIX .)
    PLUS            reduce using rule 27 (VAR -> MATRIX .)
    MINUS           reduce using rule 27 (VAR -> MATRIX .)
    PEND            reduce using rule 27 (VAR -> MATRIX .)
    RPAREN          reduce using rule 27 (VAR -> MATRIX .)
    DIM             reduce using rule 27 (VAR -> MATRIX .)
    LET             reduce using rule 27 (VAR -> MATRIX .)
    IF              reduce using rule 27 (VAR -> MATRIX .)
    WHILE           reduce using rule 27 (VAR -> MATRIX .)
    DO              reduce using rule 27 (VAR -> MATRIX .)
    FOR             reduce using rule 27 (VAR -> MATRIX .)
    LPAREN          reduce using rule 27 (VAR -> MATRIX .)
    NINT            reduce using rule 27 (VAR -> MATRIX .)
    NFLOAT          reduce using rule 27 (VAR -> MATRIX .)
    ID              reduce using rule 27 (VAR -> MATRIX .)
    LBRACK          reduce using rule 27 (VAR -> MATRIX .)
    SUBPROCEDURE    reduce using rule 27 (VAR -> MATRIX .)
    IN              reduce using rule 27 (VAR -> MATRIX .)
    PRINT           reduce using rule 27 (VAR -> MATRIX .)
    END             reduce using rule 27 (VAR -> MATRIX .)
    LT              reduce using rule 27 (VAR -> MATRIX .)
    LE              reduce using rule 27 (VAR -> MATRIX .)
    GT              reduce using rule 27 (VAR -> MATRIX .)
    GE              reduce using rule 27 (VAR -> MATRIX .)
    EQ              reduce using rule 27 (VAR -> MATRIX .)
    NE              reduce using rule 27 (VAR -> MATRIX .)
    WEND            reduce using rule 27 (VAR -> MATRIX .)
    ELSE            reduce using rule 27 (VAR -> MATRIX .)


state 29

    (28) VAR -> ID .

    MULT            reduce using rule 28 (VAR -> ID .)
    DIV             reduce using rule 28 (VAR -> ID .)
    EQUAL           reduce using rule 28 (VAR -> ID .)
    PLUS            reduce using rule 28 (VAR -> ID .)
    MINUS           reduce using rule 28 (VAR -> ID .)
    PEND            reduce using rule 28 (VAR -> ID .)
    RPAREN          reduce using rule 28 (VAR -> ID .)
    DIM             reduce using rule 28 (VAR -> ID .)
    LET             reduce using rule 28 (VAR -> ID .)
    IF              reduce using rule 28 (VAR -> ID .)
    WHILE           reduce using rule 28 (VAR -> ID .)
    DO              reduce using rule 28 (VAR -> ID .)
    FOR             reduce using rule 28 (VAR -> ID .)
    LPAREN          reduce using rule 28 (VAR -> ID .)
    NINT            reduce using rule 28 (VAR -> ID .)
    NFLOAT          reduce using rule 28 (VAR -> ID .)
    ID              reduce using rule 28 (VAR -> ID .)
    LBRACK          reduce using rule 28 (VAR -> ID .)
    SUBPROCEDURE    reduce using rule 28 (VAR -> ID .)
    IN              reduce using rule 28 (VAR -> ID .)
    PRINT           reduce using rule 28 (VAR -> ID .)
    END             reduce using rule 28 (VAR -> ID .)
    LT              reduce using rule 28 (VAR -> ID .)
    LE              reduce using rule 28 (VAR -> ID .)
    GT              reduce using rule 28 (VAR -> ID .)
    GE              reduce using rule 28 (VAR -> ID .)
    EQ              reduce using rule 28 (VAR -> ID .)
    NE              reduce using rule 28 (VAR -> ID .)
    WEND            reduce using rule 28 (VAR -> ID .)
    ELSE            reduce using rule 28 (VAR -> ID .)


state 30

    (31) VECTOR -> LBRACK . NUMTYPE RBRACK
    (32) MATRIX -> LBRACK . NUMTYPE COMMA NUMTYPE RBRACK
    (21) NUMTYPE -> . ID
    (22) NUMTYPE -> . NINT
    (23) NUMTYPE -> . NFLOAT

    ID              shift and go to state 48
    NINT            shift and go to state 49
    NFLOAT          shift and go to state 50

    NUMTYPE                        shift and go to state 47

state 31

    (5) P -> SUBPROCEDURE LPAREN . ID RPAREN V P S END

    ID              shift and go to state 51


state 32

    (6) P -> IN LPAREN . NUMTYPE RPAREN S
    (21) NUMTYPE -> . ID
    (22) NUMTYPE -> . NINT
    (23) NUMTYPE -> . NFLOAT

    ID              shift and go to state 48
    NINT            shift and go to state 49
    NFLOAT          shift and go to state 50

    NUMTYPE                        shift and go to state 52

state 33

    (7) P -> PRINT LPAREN . NUMTYPE RPAREN S
    (21) NUMTYPE -> . ID
    (22) NUMTYPE -> . NINT
    (23) NUMTYPE -> . NFLOAT

    ID              shift and go to state 48
    NINT            shift and go to state 49
    NFLOAT          shift and go to state 50

    NUMTYPE                        shift and go to state 53

state 34

    (2) V -> DIM ID AS . VARTYPE V
    (17) VARTYPE -> . INT
    (18) VARTYPE -> . FLOAT
    (19) VARTYPE -> . VECDEF
    (20) VARTYPE -> . MATDEF
    (29) VECDEF -> . VEC LBRACK RBRACK
    (30) MATDEF -> . MAT LBRACK RBRACK

    INT             shift and go to state 55
    FLOAT           shift and go to state 56
    VEC             shift and go to state 59
    MAT             shift and go to state 60

    VARTYPE                        shift and go to state 54
    VECDEF                         shift and go to state 57
    MATDEF                         shift and go to state 58

state 35

    (3) V -> LET ID EQUAL . VAR V S
    (24) VAR -> . NINT
    (25) VAR -> . NFLOAT
    (26) VAR -> . VECTOR
    (27) VAR -> . MATRIX
    (28) VAR -> . ID
    (31) VECTOR -> . LBRACK NUMTYPE RBRACK
    (32) MATRIX -> . LBRACK NUMTYPE COMMA NUMTYPE RBRACK

    NINT            shift and go to state 25
    NFLOAT          shift and go to state 26
    ID              shift and go to state 29
    LBRACK          shift and go to state 30

    VAR                            shift and go to state 61
    VECTOR                         shift and go to state 27
    MATRIX                         shift and go to state 28

state 36

    (1) START -> PROGRAM V P S PEND .

    $end            reduce using rule 1 (START -> PROGRAM V P S PEND .)


state 37

    (9) S -> IF LPAREN . RELEXPR RPAREN THEN S IFELSE END S
    (33) RELEXPR -> . VAR LT VAR
    (34) RELEXPR -> . VAR LE VAR
    (35) RELEXPR -> . VAR GT VAR
    (36) RELEXPR -> . VAR GE VAR
    (37) RELEXPR -> . VAR EQ VAR
    (38) RELEXPR -> . VAR NE VAR
    (24) VAR -> . NINT
    (25) VAR -> . NFLOAT
    (26) VAR -> . VECTOR
    (27) VAR -> . MATRIX
    (28) VAR -> . ID
    (31) VECTOR -> . LBRACK NUMTYPE RBRACK
    (32) MATRIX -> . LBRACK NUMTYPE COMMA NUMTYPE RBRACK

    NINT            shift and go to state 25
    NFLOAT          shift and go to state 26
    ID              shift and go to state 29
    LBRACK          shift and go to state 30

    RELEXPR                        shift and go to state 62
    VAR                            shift and go to state 63
    VECTOR                         shift and go to state 27
    MATRIX                         shift and go to state 28

state 38

    (44) TIER2 -> LPAREN O . RPAREN
    (39) O -> O . EQUAL O
    (40) O -> O . PLUS TIER1
    (41) O -> O . MINUS TIER1

    RPAREN          shift and go to state 64
    EQUAL           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44


state 39

    (12) S -> WHILE LPAREN . RELEXPR RPAREN S WEND S
    (33) RELEXPR -> . VAR LT VAR
    (34) RELEXPR -> . VAR LE VAR
    (35) RELEXPR -> . VAR GT VAR
    (36) RELEXPR -> . VAR GE VAR
    (37) RELEXPR -> . VAR EQ VAR
    (38) RELEXPR -> . VAR NE VAR
    (24) VAR -> . NINT
    (25) VAR -> . NFLOAT
    (26) VAR -> . VECTOR
    (27) VAR -> . MATRIX
    (28) VAR -> . ID
    (31) VECTOR -> . LBRACK NUMTYPE RBRACK
    (32) MATRIX -> . LBRACK NUMTYPE COMMA NUMTYPE RBRACK

    NINT            shift and go to state 25
    NFLOAT          shift and go to state 26
    ID              shift and go to state 29
    LBRACK          shift and go to state 30

    RELEXPR                        shift and go to state 65
    VAR                            shift and go to state 63
    VECTOR                         shift and go to state 27
    MATRIX                         shift and go to state 28

state 40

    (13) S -> DO COLON . S WHILE LPAREN RELEXPR RPAREN S
    (9) S -> . IF LPAREN RELEXPR RPAREN THEN S IFELSE END S
    (12) S -> . WHILE LPAREN RELEXPR RPAREN S WEND S
    (13) S -> . DO COLON S WHILE LPAREN RELEXPR RPAREN S
    (14) S -> . FOR LPAREN RELEXPR RPAREN S END S
    (15) S -> . O
    (16) S -> . EMPTY
    (39) O -> . O EQUAL O
    (40) O -> . O PLUS TIER1
    (41) O -> . O MINUS TIER1
    (45) O -> . TIER1
    (48) EMPTY -> .
    (42) TIER1 -> . TIER1 MULT TIER2
    (43) TIER1 -> . TIER1 DIV TIER2
    (46) TIER1 -> . TIER2
    (44) TIER2 -> . LPAREN O RPAREN
    (47) TIER2 -> . VAR
    (24) VAR -> . NINT
    (25) VAR -> . NFLOAT
    (26) VAR -> . VECTOR
    (27) VAR -> . MATRIX
    (28) VAR -> . ID
    (31) VECTOR -> . LBRACK NUMTYPE RBRACK
    (32) MATRIX -> . LBRACK NUMTYPE COMMA NUMTYPE RBRACK

  ! shift/reduce conflict for WHILE resolved as shift
    IF              shift and go to state 15
    WHILE           shift and go to state 17
    DO              shift and go to state 18
    FOR             shift and go to state 19
    LPAREN          shift and go to state 16
    NINT            shift and go to state 25
    NFLOAT          shift and go to state 26
    ID              shift and go to state 29
    LBRACK          shift and go to state 30

  ! WHILE           [ reduce using rule 48 (EMPTY -> .) ]

    S                              shift and go to state 66
    O                              shift and go to state 20
    EMPTY                          shift and go to state 21
    TIER1                          shift and go to state 22
    TIER2                          shift and go to state 23
    VAR                            shift and go to state 24
    VECTOR                         shift and go to state 27
    MATRIX                         shift and go to state 28

state 41

    (14) S -> FOR LPAREN . RELEXPR RPAREN S END S
    (33) RELEXPR -> . VAR LT VAR
    (34) RELEXPR -> . VAR LE VAR
    (35) RELEXPR -> . VAR GT VAR
    (36) RELEXPR -> . VAR GE VAR
    (37) RELEXPR -> . VAR EQ VAR
    (38) RELEXPR -> . VAR NE VAR
    (24) VAR -> . NINT
    (25) VAR -> . NFLOAT
    (26) VAR -> . VECTOR
    (27) VAR -> . MATRIX
    (28) VAR -> . ID
    (31) VECTOR -> . LBRACK NUMTYPE RBRACK
    (32) MATRIX -> . LBRACK NUMTYPE COMMA NUMTYPE RBRACK

    NINT            shift and go to state 25
    NFLOAT          shift and go to state 26
    ID              shift and go to state 29
    LBRACK          shift and go to state 30

    RELEXPR                        shift and go to state 67
    VAR                            shift and go to state 63
    VECTOR                         shift and go to state 27
    MATRIX                         shift and go to state 28

state 42

    (39) O -> O EQUAL . O
    (39) O -> . O EQUAL O
    (40) O -> . O PLUS TIER1
    (41) O -> . O MINUS TIER1
    (45) O -> . TIER1
    (42) TIER1 -> . TIER1 MULT TIER2
    (43) TIER1 -> . TIER1 DIV TIER2
    (46) TIER1 -> . TIER2
    (44) TIER2 -> . LPAREN O RPAREN
    (47) TIER2 -> . VAR
    (24) VAR -> . NINT
    (25) VAR -> . NFLOAT
    (26) VAR -> . VECTOR
    (27) VAR -> . MATRIX
    (28) VAR -> . ID
    (31) VECTOR -> . LBRACK NUMTYPE RBRACK
    (32) MATRIX -> . LBRACK NUMTYPE COMMA NUMTYPE RBRACK

    LPAREN          shift and go to state 16
    NINT            shift and go to state 25
    NFLOAT          shift and go to state 26
    ID              shift and go to state 29
    LBRACK          shift and go to state 30

    O                              shift and go to state 68
    TIER1                          shift and go to state 22
    TIER2                          shift and go to state 23
    VAR                            shift and go to state 24
    VECTOR                         shift and go to state 27
    MATRIX                         shift and go to state 28

state 43

    (40) O -> O PLUS . TIER1
    (42) TIER1 -> . TIER1 MULT TIER2
    (43) TIER1 -> . TIER1 DIV TIER2
    (46) TIER1 -> . TIER2
    (44) TIER2 -> . LPAREN O RPAREN
    (47) TIER2 -> . VAR
    (24) VAR -> . NINT
    (25) VAR -> . NFLOAT
    (26) VAR -> . VECTOR
    (27) VAR -> . MATRIX
    (28) VAR -> . ID
    (31) VECTOR -> . LBRACK NUMTYPE RBRACK
    (32) MATRIX -> . LBRACK NUMTYPE COMMA NUMTYPE RBRACK

    LPAREN          shift and go to state 16
    NINT            shift and go to state 25
    NFLOAT          shift and go to state 26
    ID              shift and go to state 29
    LBRACK          shift and go to state 30

    TIER1                          shift and go to state 69
    TIER2                          shift and go to state 23
    VAR                            shift and go to state 24
    VECTOR                         shift and go to state 27
    MATRIX                         shift and go to state 28

state 44

    (41) O -> O MINUS . TIER1
    (42) TIER1 -> . TIER1 MULT TIER2
    (43) TIER1 -> . TIER1 DIV TIER2
    (46) TIER1 -> . TIER2
    (44) TIER2 -> . LPAREN O RPAREN
    (47) TIER2 -> . VAR
    (24) VAR -> . NINT
    (25) VAR -> . NFLOAT
    (26) VAR -> . VECTOR
    (27) VAR -> . MATRIX
    (28) VAR -> . ID
    (31) VECTOR -> . LBRACK NUMTYPE RBRACK
    (32) MATRIX -> . LBRACK NUMTYPE COMMA NUMTYPE RBRACK

    LPAREN          shift and go to state 16
    NINT            shift and go to state 25
    NFLOAT          shift and go to state 26
    ID              shift and go to state 29
    LBRACK          shift and go to state 30

    TIER1                          shift and go to state 70
    TIER2                          shift and go to state 23
    VAR                            shift and go to state 24
    VECTOR                         shift and go to state 27
    MATRIX                         shift and go to state 28

state 45

    (42) TIER1 -> TIER1 MULT . TIER2
    (44) TIER2 -> . LPAREN O RPAREN
    (47) TIER2 -> . VAR
    (24) VAR -> . NINT
    (25) VAR -> . NFLOAT
    (26) VAR -> . VECTOR
    (27) VAR -> . MATRIX
    (28) VAR -> . ID
    (31) VECTOR -> . LBRACK NUMTYPE RBRACK
    (32) MATRIX -> . LBRACK NUMTYPE COMMA NUMTYPE RBRACK

    LPAREN          shift and go to state 16
    NINT            shift and go to state 25
    NFLOAT          shift and go to state 26
    ID              shift and go to state 29
    LBRACK          shift and go to state 30

    TIER2                          shift and go to state 71
    VAR                            shift and go to state 24
    VECTOR                         shift and go to state 27
    MATRIX                         shift and go to state 28

state 46

    (43) TIER1 -> TIER1 DIV . TIER2
    (44) TIER2 -> . LPAREN O RPAREN
    (47) TIER2 -> . VAR
    (24) VAR -> . NINT
    (25) VAR -> . NFLOAT
    (26) VAR -> . VECTOR
    (27) VAR -> . MATRIX
    (28) VAR -> . ID
    (31) VECTOR -> . LBRACK NUMTYPE RBRACK
    (32) MATRIX -> . LBRACK NUMTYPE COMMA NUMTYPE RBRACK

    LPAREN          shift and go to state 16
    NINT            shift and go to state 25
    NFLOAT          shift and go to state 26
    ID              shift and go to state 29
    LBRACK          shift and go to state 30

    TIER2                          shift and go to state 72
    VAR                            shift and go to state 24
    VECTOR                         shift and go to state 27
    MATRIX                         shift and go to state 28

state 47

    (31) VECTOR -> LBRACK NUMTYPE . RBRACK
    (32) MATRIX -> LBRACK NUMTYPE . COMMA NUMTYPE RBRACK

    RBRACK          shift and go to state 73
    COMMA           shift and go to state 74


state 48

    (21) NUMTYPE -> ID .

    RBRACK          reduce using rule 21 (NUMTYPE -> ID .)
    COMMA           reduce using rule 21 (NUMTYPE -> ID .)
    RPAREN          reduce using rule 21 (NUMTYPE -> ID .)


state 49

    (22) NUMTYPE -> NINT .

    RBRACK          reduce using rule 22 (NUMTYPE -> NINT .)
    COMMA           reduce using rule 22 (NUMTYPE -> NINT .)
    RPAREN          reduce using rule 22 (NUMTYPE -> NINT .)


state 50

    (23) NUMTYPE -> NFLOAT .

    RBRACK          reduce using rule 23 (NUMTYPE -> NFLOAT .)
    COMMA           reduce using rule 23 (NUMTYPE -> NFLOAT .)
    RPAREN          reduce using rule 23 (NUMTYPE -> NFLOAT .)


state 51

    (5) P -> SUBPROCEDURE LPAREN ID . RPAREN V P S END

    RPAREN          shift and go to state 75


state 52

    (6) P -> IN LPAREN NUMTYPE . RPAREN S

    RPAREN          shift and go to state 76


state 53

    (7) P -> PRINT LPAREN NUMTYPE . RPAREN S

    RPAREN          shift and go to state 77


state 54

    (2) V -> DIM ID AS VARTYPE . V
    (2) V -> . DIM ID AS VARTYPE V
    (3) V -> . LET ID EQUAL VAR V S
    (4) V -> . EMPTY
    (48) EMPTY -> .

    DIM             shift and go to state 4
    LET             shift and go to state 5
    SUBPROCEDURE    reduce using rule 48 (EMPTY -> .)
    IN              reduce using rule 48 (EMPTY -> .)
    PRINT           reduce using rule 48 (EMPTY -> .)
    IF              reduce using rule 48 (EMPTY -> .)
    WHILE           reduce using rule 48 (EMPTY -> .)
    DO              reduce using rule 48 (EMPTY -> .)
    FOR             reduce using rule 48 (EMPTY -> .)
    LPAREN          reduce using rule 48 (EMPTY -> .)
    NINT            reduce using rule 48 (EMPTY -> .)
    NFLOAT          reduce using rule 48 (EMPTY -> .)
    ID              reduce using rule 48 (EMPTY -> .)
    LBRACK          reduce using rule 48 (EMPTY -> .)
    PEND            reduce using rule 48 (EMPTY -> .)
    END             reduce using rule 48 (EMPTY -> .)

    V                              shift and go to state 78
    EMPTY                          shift and go to state 6

state 55

    (17) VARTYPE -> INT .

    DIM             reduce using rule 17 (VARTYPE -> INT .)
    LET             reduce using rule 17 (VARTYPE -> INT .)
    SUBPROCEDURE    reduce using rule 17 (VARTYPE -> INT .)
    IN              reduce using rule 17 (VARTYPE -> INT .)
    PRINT           reduce using rule 17 (VARTYPE -> INT .)
    IF              reduce using rule 17 (VARTYPE -> INT .)
    WHILE           reduce using rule 17 (VARTYPE -> INT .)
    DO              reduce using rule 17 (VARTYPE -> INT .)
    FOR             reduce using rule 17 (VARTYPE -> INT .)
    LPAREN          reduce using rule 17 (VARTYPE -> INT .)
    NINT            reduce using rule 17 (VARTYPE -> INT .)
    NFLOAT          reduce using rule 17 (VARTYPE -> INT .)
    ID              reduce using rule 17 (VARTYPE -> INT .)
    LBRACK          reduce using rule 17 (VARTYPE -> INT .)
    PEND            reduce using rule 17 (VARTYPE -> INT .)
    END             reduce using rule 17 (VARTYPE -> INT .)


state 56

    (18) VARTYPE -> FLOAT .

    DIM             reduce using rule 18 (VARTYPE -> FLOAT .)
    LET             reduce using rule 18 (VARTYPE -> FLOAT .)
    SUBPROCEDURE    reduce using rule 18 (VARTYPE -> FLOAT .)
    IN              reduce using rule 18 (VARTYPE -> FLOAT .)
    PRINT           reduce using rule 18 (VARTYPE -> FLOAT .)
    IF              reduce using rule 18 (VARTYPE -> FLOAT .)
    WHILE           reduce using rule 18 (VARTYPE -> FLOAT .)
    DO              reduce using rule 18 (VARTYPE -> FLOAT .)
    FOR             reduce using rule 18 (VARTYPE -> FLOAT .)
    LPAREN          reduce using rule 18 (VARTYPE -> FLOAT .)
    NINT            reduce using rule 18 (VARTYPE -> FLOAT .)
    NFLOAT          reduce using rule 18 (VARTYPE -> FLOAT .)
    ID              reduce using rule 18 (VARTYPE -> FLOAT .)
    LBRACK          reduce using rule 18 (VARTYPE -> FLOAT .)
    PEND            reduce using rule 18 (VARTYPE -> FLOAT .)
    END             reduce using rule 18 (VARTYPE -> FLOAT .)


state 57

    (19) VARTYPE -> VECDEF .

    DIM             reduce using rule 19 (VARTYPE -> VECDEF .)
    LET             reduce using rule 19 (VARTYPE -> VECDEF .)
    SUBPROCEDURE    reduce using rule 19 (VARTYPE -> VECDEF .)
    IN              reduce using rule 19 (VARTYPE -> VECDEF .)
    PRINT           reduce using rule 19 (VARTYPE -> VECDEF .)
    IF              reduce using rule 19 (VARTYPE -> VECDEF .)
    WHILE           reduce using rule 19 (VARTYPE -> VECDEF .)
    DO              reduce using rule 19 (VARTYPE -> VECDEF .)
    FOR             reduce using rule 19 (VARTYPE -> VECDEF .)
    LPAREN          reduce using rule 19 (VARTYPE -> VECDEF .)
    NINT            reduce using rule 19 (VARTYPE -> VECDEF .)
    NFLOAT          reduce using rule 19 (VARTYPE -> VECDEF .)
    ID              reduce using rule 19 (VARTYPE -> VECDEF .)
    LBRACK          reduce using rule 19 (VARTYPE -> VECDEF .)
    PEND            reduce using rule 19 (VARTYPE -> VECDEF .)
    END             reduce using rule 19 (VARTYPE -> VECDEF .)


state 58

    (20) VARTYPE -> MATDEF .

    DIM             reduce using rule 20 (VARTYPE -> MATDEF .)
    LET             reduce using rule 20 (VARTYPE -> MATDEF .)
    SUBPROCEDURE    reduce using rule 20 (VARTYPE -> MATDEF .)
    IN              reduce using rule 20 (VARTYPE -> MATDEF .)
    PRINT           reduce using rule 20 (VARTYPE -> MATDEF .)
    IF              reduce using rule 20 (VARTYPE -> MATDEF .)
    WHILE           reduce using rule 20 (VARTYPE -> MATDEF .)
    DO              reduce using rule 20 (VARTYPE -> MATDEF .)
    FOR             reduce using rule 20 (VARTYPE -> MATDEF .)
    LPAREN          reduce using rule 20 (VARTYPE -> MATDEF .)
    NINT            reduce using rule 20 (VARTYPE -> MATDEF .)
    NFLOAT          reduce using rule 20 (VARTYPE -> MATDEF .)
    ID              reduce using rule 20 (VARTYPE -> MATDEF .)
    LBRACK          reduce using rule 20 (VARTYPE -> MATDEF .)
    PEND            reduce using rule 20 (VARTYPE -> MATDEF .)
    END             reduce using rule 20 (VARTYPE -> MATDEF .)


state 59

    (29) VECDEF -> VEC . LBRACK RBRACK

    LBRACK          shift and go to state 79


state 60

    (30) MATDEF -> MAT . LBRACK RBRACK

    LBRACK          shift and go to state 80


state 61

    (3) V -> LET ID EQUAL VAR . V S
    (2) V -> . DIM ID AS VARTYPE V
    (3) V -> . LET ID EQUAL VAR V S
    (4) V -> . EMPTY
    (48) EMPTY -> .

    DIM             shift and go to state 4
    LET             shift and go to state 5
    SUBPROCEDURE    reduce using rule 48 (EMPTY -> .)
    IN              reduce using rule 48 (EMPTY -> .)
    PRINT           reduce using rule 48 (EMPTY -> .)
    IF              reduce using rule 48 (EMPTY -> .)
    WHILE           reduce using rule 48 (EMPTY -> .)
    DO              reduce using rule 48 (EMPTY -> .)
    FOR             reduce using rule 48 (EMPTY -> .)
    LPAREN          reduce using rule 48 (EMPTY -> .)
    NINT            reduce using rule 48 (EMPTY -> .)
    NFLOAT          reduce using rule 48 (EMPTY -> .)
    ID              reduce using rule 48 (EMPTY -> .)
    LBRACK          reduce using rule 48 (EMPTY -> .)
    PEND            reduce using rule 48 (EMPTY -> .)
    END             reduce using rule 48 (EMPTY -> .)

    V                              shift and go to state 81
    EMPTY                          shift and go to state 6

state 62

    (9) S -> IF LPAREN RELEXPR . RPAREN THEN S IFELSE END S

    RPAREN          shift and go to state 82


state 63

    (33) RELEXPR -> VAR . LT VAR
    (34) RELEXPR -> VAR . LE VAR
    (35) RELEXPR -> VAR . GT VAR
    (36) RELEXPR -> VAR . GE VAR
    (37) RELEXPR -> VAR . EQ VAR
    (38) RELEXPR -> VAR . NE VAR

    LT              shift and go to state 83
    LE              shift and go to state 84
    GT              shift and go to state 85
    GE              shift and go to state 86
    EQ              shift and go to state 87
    NE              shift and go to state 88


state 64

    (44) TIER2 -> LPAREN O RPAREN .

    MULT            reduce using rule 44 (TIER2 -> LPAREN O RPAREN .)
    DIV             reduce using rule 44 (TIER2 -> LPAREN O RPAREN .)
    EQUAL           reduce using rule 44 (TIER2 -> LPAREN O RPAREN .)
    PLUS            reduce using rule 44 (TIER2 -> LPAREN O RPAREN .)
    MINUS           reduce using rule 44 (TIER2 -> LPAREN O RPAREN .)
    PEND            reduce using rule 44 (TIER2 -> LPAREN O RPAREN .)
    RPAREN          reduce using rule 44 (TIER2 -> LPAREN O RPAREN .)
    WHILE           reduce using rule 44 (TIER2 -> LPAREN O RPAREN .)
    IF              reduce using rule 44 (TIER2 -> LPAREN O RPAREN .)
    DO              reduce using rule 44 (TIER2 -> LPAREN O RPAREN .)
    FOR             reduce using rule 44 (TIER2 -> LPAREN O RPAREN .)
    LPAREN          reduce using rule 44 (TIER2 -> LPAREN O RPAREN .)
    NINT            reduce using rule 44 (TIER2 -> LPAREN O RPAREN .)
    NFLOAT          reduce using rule 44 (TIER2 -> LPAREN O RPAREN .)
    ID              reduce using rule 44 (TIER2 -> LPAREN O RPAREN .)
    LBRACK          reduce using rule 44 (TIER2 -> LPAREN O RPAREN .)
    END             reduce using rule 44 (TIER2 -> LPAREN O RPAREN .)
    SUBPROCEDURE    reduce using rule 44 (TIER2 -> LPAREN O RPAREN .)
    IN              reduce using rule 44 (TIER2 -> LPAREN O RPAREN .)
    PRINT           reduce using rule 44 (TIER2 -> LPAREN O RPAREN .)
    WEND            reduce using rule 44 (TIER2 -> LPAREN O RPAREN .)
    ELSE            reduce using rule 44 (TIER2 -> LPAREN O RPAREN .)


state 65

    (12) S -> WHILE LPAREN RELEXPR . RPAREN S WEND S

    RPAREN          shift and go to state 89


state 66

    (13) S -> DO COLON S . WHILE LPAREN RELEXPR RPAREN S

    WHILE           shift and go to state 90


state 67

    (14) S -> FOR LPAREN RELEXPR . RPAREN S END S

    RPAREN          shift and go to state 91


state 68

    (39) O -> O EQUAL O .
    (39) O -> O . EQUAL O
    (40) O -> O . PLUS TIER1
    (41) O -> O . MINUS TIER1

  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    PEND            reduce using rule 39 (O -> O EQUAL O .)
    RPAREN          reduce using rule 39 (O -> O EQUAL O .)
    WHILE           reduce using rule 39 (O -> O EQUAL O .)
    IF              reduce using rule 39 (O -> O EQUAL O .)
    DO              reduce using rule 39 (O -> O EQUAL O .)
    FOR             reduce using rule 39 (O -> O EQUAL O .)
    LPAREN          reduce using rule 39 (O -> O EQUAL O .)
    NINT            reduce using rule 39 (O -> O EQUAL O .)
    NFLOAT          reduce using rule 39 (O -> O EQUAL O .)
    ID              reduce using rule 39 (O -> O EQUAL O .)
    LBRACK          reduce using rule 39 (O -> O EQUAL O .)
    END             reduce using rule 39 (O -> O EQUAL O .)
    SUBPROCEDURE    reduce using rule 39 (O -> O EQUAL O .)
    IN              reduce using rule 39 (O -> O EQUAL O .)
    PRINT           reduce using rule 39 (O -> O EQUAL O .)
    WEND            reduce using rule 39 (O -> O EQUAL O .)
    ELSE            reduce using rule 39 (O -> O EQUAL O .)
    EQUAL           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44

  ! EQUAL           [ reduce using rule 39 (O -> O EQUAL O .) ]
  ! PLUS            [ reduce using rule 39 (O -> O EQUAL O .) ]
  ! MINUS           [ reduce using rule 39 (O -> O EQUAL O .) ]


state 69

    (40) O -> O PLUS TIER1 .
    (42) TIER1 -> TIER1 . MULT TIER2
    (43) TIER1 -> TIER1 . DIV TIER2

    EQUAL           reduce using rule 40 (O -> O PLUS TIER1 .)
    PLUS            reduce using rule 40 (O -> O PLUS TIER1 .)
    MINUS           reduce using rule 40 (O -> O PLUS TIER1 .)
    PEND            reduce using rule 40 (O -> O PLUS TIER1 .)
    RPAREN          reduce using rule 40 (O -> O PLUS TIER1 .)
    WHILE           reduce using rule 40 (O -> O PLUS TIER1 .)
    IF              reduce using rule 40 (O -> O PLUS TIER1 .)
    DO              reduce using rule 40 (O -> O PLUS TIER1 .)
    FOR             reduce using rule 40 (O -> O PLUS TIER1 .)
    LPAREN          reduce using rule 40 (O -> O PLUS TIER1 .)
    NINT            reduce using rule 40 (O -> O PLUS TIER1 .)
    NFLOAT          reduce using rule 40 (O -> O PLUS TIER1 .)
    ID              reduce using rule 40 (O -> O PLUS TIER1 .)
    LBRACK          reduce using rule 40 (O -> O PLUS TIER1 .)
    END             reduce using rule 40 (O -> O PLUS TIER1 .)
    SUBPROCEDURE    reduce using rule 40 (O -> O PLUS TIER1 .)
    IN              reduce using rule 40 (O -> O PLUS TIER1 .)
    PRINT           reduce using rule 40 (O -> O PLUS TIER1 .)
    WEND            reduce using rule 40 (O -> O PLUS TIER1 .)
    ELSE            reduce using rule 40 (O -> O PLUS TIER1 .)
    MULT            shift and go to state 45
    DIV             shift and go to state 46


state 70

    (41) O -> O MINUS TIER1 .
    (42) TIER1 -> TIER1 . MULT TIER2
    (43) TIER1 -> TIER1 . DIV TIER2

    EQUAL           reduce using rule 41 (O -> O MINUS TIER1 .)
    PLUS            reduce using rule 41 (O -> O MINUS TIER1 .)
    MINUS           reduce using rule 41 (O -> O MINUS TIER1 .)
    PEND            reduce using rule 41 (O -> O MINUS TIER1 .)
    RPAREN          reduce using rule 41 (O -> O MINUS TIER1 .)
    WHILE           reduce using rule 41 (O -> O MINUS TIER1 .)
    IF              reduce using rule 41 (O -> O MINUS TIER1 .)
    DO              reduce using rule 41 (O -> O MINUS TIER1 .)
    FOR             reduce using rule 41 (O -> O MINUS TIER1 .)
    LPAREN          reduce using rule 41 (O -> O MINUS TIER1 .)
    NINT            reduce using rule 41 (O -> O MINUS TIER1 .)
    NFLOAT          reduce using rule 41 (O -> O MINUS TIER1 .)
    ID              reduce using rule 41 (O -> O MINUS TIER1 .)
    LBRACK          reduce using rule 41 (O -> O MINUS TIER1 .)
    END             reduce using rule 41 (O -> O MINUS TIER1 .)
    SUBPROCEDURE    reduce using rule 41 (O -> O MINUS TIER1 .)
    IN              reduce using rule 41 (O -> O MINUS TIER1 .)
    PRINT           reduce using rule 41 (O -> O MINUS TIER1 .)
    WEND            reduce using rule 41 (O -> O MINUS TIER1 .)
    ELSE            reduce using rule 41 (O -> O MINUS TIER1 .)
    MULT            shift and go to state 45
    DIV             shift and go to state 46


state 71

    (42) TIER1 -> TIER1 MULT TIER2 .

    MULT            reduce using rule 42 (TIER1 -> TIER1 MULT TIER2 .)
    DIV             reduce using rule 42 (TIER1 -> TIER1 MULT TIER2 .)
    EQUAL           reduce using rule 42 (TIER1 -> TIER1 MULT TIER2 .)
    PLUS            reduce using rule 42 (TIER1 -> TIER1 MULT TIER2 .)
    MINUS           reduce using rule 42 (TIER1 -> TIER1 MULT TIER2 .)
    PEND            reduce using rule 42 (TIER1 -> TIER1 MULT TIER2 .)
    RPAREN          reduce using rule 42 (TIER1 -> TIER1 MULT TIER2 .)
    WHILE           reduce using rule 42 (TIER1 -> TIER1 MULT TIER2 .)
    IF              reduce using rule 42 (TIER1 -> TIER1 MULT TIER2 .)
    DO              reduce using rule 42 (TIER1 -> TIER1 MULT TIER2 .)
    FOR             reduce using rule 42 (TIER1 -> TIER1 MULT TIER2 .)
    LPAREN          reduce using rule 42 (TIER1 -> TIER1 MULT TIER2 .)
    NINT            reduce using rule 42 (TIER1 -> TIER1 MULT TIER2 .)
    NFLOAT          reduce using rule 42 (TIER1 -> TIER1 MULT TIER2 .)
    ID              reduce using rule 42 (TIER1 -> TIER1 MULT TIER2 .)
    LBRACK          reduce using rule 42 (TIER1 -> TIER1 MULT TIER2 .)
    END             reduce using rule 42 (TIER1 -> TIER1 MULT TIER2 .)
    SUBPROCEDURE    reduce using rule 42 (TIER1 -> TIER1 MULT TIER2 .)
    IN              reduce using rule 42 (TIER1 -> TIER1 MULT TIER2 .)
    PRINT           reduce using rule 42 (TIER1 -> TIER1 MULT TIER2 .)
    WEND            reduce using rule 42 (TIER1 -> TIER1 MULT TIER2 .)
    ELSE            reduce using rule 42 (TIER1 -> TIER1 MULT TIER2 .)


state 72

    (43) TIER1 -> TIER1 DIV TIER2 .

    MULT            reduce using rule 43 (TIER1 -> TIER1 DIV TIER2 .)
    DIV             reduce using rule 43 (TIER1 -> TIER1 DIV TIER2 .)
    EQUAL           reduce using rule 43 (TIER1 -> TIER1 DIV TIER2 .)
    PLUS            reduce using rule 43 (TIER1 -> TIER1 DIV TIER2 .)
    MINUS           reduce using rule 43 (TIER1 -> TIER1 DIV TIER2 .)
    PEND            reduce using rule 43 (TIER1 -> TIER1 DIV TIER2 .)
    RPAREN          reduce using rule 43 (TIER1 -> TIER1 DIV TIER2 .)
    WHILE           reduce using rule 43 (TIER1 -> TIER1 DIV TIER2 .)
    IF              reduce using rule 43 (TIER1 -> TIER1 DIV TIER2 .)
    DO              reduce using rule 43 (TIER1 -> TIER1 DIV TIER2 .)
    FOR             reduce using rule 43 (TIER1 -> TIER1 DIV TIER2 .)
    LPAREN          reduce using rule 43 (TIER1 -> TIER1 DIV TIER2 .)
    NINT            reduce using rule 43 (TIER1 -> TIER1 DIV TIER2 .)
    NFLOAT          reduce using rule 43 (TIER1 -> TIER1 DIV TIER2 .)
    ID              reduce using rule 43 (TIER1 -> TIER1 DIV TIER2 .)
    LBRACK          reduce using rule 43 (TIER1 -> TIER1 DIV TIER2 .)
    END             reduce using rule 43 (TIER1 -> TIER1 DIV TIER2 .)
    SUBPROCEDURE    reduce using rule 43 (TIER1 -> TIER1 DIV TIER2 .)
    IN              reduce using rule 43 (TIER1 -> TIER1 DIV TIER2 .)
    PRINT           reduce using rule 43 (TIER1 -> TIER1 DIV TIER2 .)
    WEND            reduce using rule 43 (TIER1 -> TIER1 DIV TIER2 .)
    ELSE            reduce using rule 43 (TIER1 -> TIER1 DIV TIER2 .)


state 73

    (31) VECTOR -> LBRACK NUMTYPE RBRACK .

    MULT            reduce using rule 31 (VECTOR -> LBRACK NUMTYPE RBRACK .)
    DIV             reduce using rule 31 (VECTOR -> LBRACK NUMTYPE RBRACK .)
    EQUAL           reduce using rule 31 (VECTOR -> LBRACK NUMTYPE RBRACK .)
    PLUS            reduce using rule 31 (VECTOR -> LBRACK NUMTYPE RBRACK .)
    MINUS           reduce using rule 31 (VECTOR -> LBRACK NUMTYPE RBRACK .)
    PEND            reduce using rule 31 (VECTOR -> LBRACK NUMTYPE RBRACK .)
    RPAREN          reduce using rule 31 (VECTOR -> LBRACK NUMTYPE RBRACK .)
    DIM             reduce using rule 31 (VECTOR -> LBRACK NUMTYPE RBRACK .)
    LET             reduce using rule 31 (VECTOR -> LBRACK NUMTYPE RBRACK .)
    IF              reduce using rule 31 (VECTOR -> LBRACK NUMTYPE RBRACK .)
    WHILE           reduce using rule 31 (VECTOR -> LBRACK NUMTYPE RBRACK .)
    DO              reduce using rule 31 (VECTOR -> LBRACK NUMTYPE RBRACK .)
    FOR             reduce using rule 31 (VECTOR -> LBRACK NUMTYPE RBRACK .)
    LPAREN          reduce using rule 31 (VECTOR -> LBRACK NUMTYPE RBRACK .)
    NINT            reduce using rule 31 (VECTOR -> LBRACK NUMTYPE RBRACK .)
    NFLOAT          reduce using rule 31 (VECTOR -> LBRACK NUMTYPE RBRACK .)
    ID              reduce using rule 31 (VECTOR -> LBRACK NUMTYPE RBRACK .)
    LBRACK          reduce using rule 31 (VECTOR -> LBRACK NUMTYPE RBRACK .)
    SUBPROCEDURE    reduce using rule 31 (VECTOR -> LBRACK NUMTYPE RBRACK .)
    IN              reduce using rule 31 (VECTOR -> LBRACK NUMTYPE RBRACK .)
    PRINT           reduce using rule 31 (VECTOR -> LBRACK NUMTYPE RBRACK .)
    END             reduce using rule 31 (VECTOR -> LBRACK NUMTYPE RBRACK .)
    LT              reduce using rule 31 (VECTOR -> LBRACK NUMTYPE RBRACK .)
    LE              reduce using rule 31 (VECTOR -> LBRACK NUMTYPE RBRACK .)
    GT              reduce using rule 31 (VECTOR -> LBRACK NUMTYPE RBRACK .)
    GE              reduce using rule 31 (VECTOR -> LBRACK NUMTYPE RBRACK .)
    EQ              reduce using rule 31 (VECTOR -> LBRACK NUMTYPE RBRACK .)
    NE              reduce using rule 31 (VECTOR -> LBRACK NUMTYPE RBRACK .)
    WEND            reduce using rule 31 (VECTOR -> LBRACK NUMTYPE RBRACK .)
    ELSE            reduce using rule 31 (VECTOR -> LBRACK NUMTYPE RBRACK .)


state 74

    (32) MATRIX -> LBRACK NUMTYPE COMMA . NUMTYPE RBRACK
    (21) NUMTYPE -> . ID
    (22) NUMTYPE -> . NINT
    (23) NUMTYPE -> . NFLOAT

    ID              shift and go to state 48
    NINT            shift and go to state 49
    NFLOAT          shift and go to state 50

    NUMTYPE                        shift and go to state 92

state 75

    (5) P -> SUBPROCEDURE LPAREN ID RPAREN . V P S END
    (2) V -> . DIM ID AS VARTYPE V
    (3) V -> . LET ID EQUAL VAR V S
    (4) V -> . EMPTY
    (48) EMPTY -> .

    DIM             shift and go to state 4
    LET             shift and go to state 5
    SUBPROCEDURE    reduce using rule 48 (EMPTY -> .)
    IN              reduce using rule 48 (EMPTY -> .)
    PRINT           reduce using rule 48 (EMPTY -> .)
    IF              reduce using rule 48 (EMPTY -> .)
    WHILE           reduce using rule 48 (EMPTY -> .)
    DO              reduce using rule 48 (EMPTY -> .)
    FOR             reduce using rule 48 (EMPTY -> .)
    LPAREN          reduce using rule 48 (EMPTY -> .)
    NINT            reduce using rule 48 (EMPTY -> .)
    NFLOAT          reduce using rule 48 (EMPTY -> .)
    ID              reduce using rule 48 (EMPTY -> .)
    LBRACK          reduce using rule 48 (EMPTY -> .)
    END             reduce using rule 48 (EMPTY -> .)

    V                              shift and go to state 93
    EMPTY                          shift and go to state 6

state 76

    (6) P -> IN LPAREN NUMTYPE RPAREN . S
    (9) S -> . IF LPAREN RELEXPR RPAREN THEN S IFELSE END S
    (12) S -> . WHILE LPAREN RELEXPR RPAREN S WEND S
    (13) S -> . DO COLON S WHILE LPAREN RELEXPR RPAREN S
    (14) S -> . FOR LPAREN RELEXPR RPAREN S END S
    (15) S -> . O
    (16) S -> . EMPTY
    (39) O -> . O EQUAL O
    (40) O -> . O PLUS TIER1
    (41) O -> . O MINUS TIER1
    (45) O -> . TIER1
    (48) EMPTY -> .
    (42) TIER1 -> . TIER1 MULT TIER2
    (43) TIER1 -> . TIER1 DIV TIER2
    (46) TIER1 -> . TIER2
    (44) TIER2 -> . LPAREN O RPAREN
    (47) TIER2 -> . VAR
    (24) VAR -> . NINT
    (25) VAR -> . NFLOAT
    (26) VAR -> . VECTOR
    (27) VAR -> . MATRIX
    (28) VAR -> . ID
    (31) VECTOR -> . LBRACK NUMTYPE RBRACK
    (32) MATRIX -> . LBRACK NUMTYPE COMMA NUMTYPE RBRACK

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NINT resolved as shift
  ! shift/reduce conflict for NFLOAT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LBRACK resolved as shift
    IF              shift and go to state 15
    WHILE           shift and go to state 17
    DO              shift and go to state 18
    FOR             shift and go to state 19
    PEND            reduce using rule 48 (EMPTY -> .)
    END             reduce using rule 48 (EMPTY -> .)
    LPAREN          shift and go to state 16
    NINT            shift and go to state 25
    NFLOAT          shift and go to state 26
    ID              shift and go to state 29
    LBRACK          shift and go to state 30

  ! IF              [ reduce using rule 48 (EMPTY -> .) ]
  ! WHILE           [ reduce using rule 48 (EMPTY -> .) ]
  ! DO              [ reduce using rule 48 (EMPTY -> .) ]
  ! FOR             [ reduce using rule 48 (EMPTY -> .) ]
  ! LPAREN          [ reduce using rule 48 (EMPTY -> .) ]
  ! NINT            [ reduce using rule 48 (EMPTY -> .) ]
  ! NFLOAT          [ reduce using rule 48 (EMPTY -> .) ]
  ! ID              [ reduce using rule 48 (EMPTY -> .) ]
  ! LBRACK          [ reduce using rule 48 (EMPTY -> .) ]

    S                              shift and go to state 94
    O                              shift and go to state 20
    EMPTY                          shift and go to state 21
    TIER1                          shift and go to state 22
    TIER2                          shift and go to state 23
    VAR                            shift and go to state 24
    VECTOR                         shift and go to state 27
    MATRIX                         shift and go to state 28

state 77

    (7) P -> PRINT LPAREN NUMTYPE RPAREN . S
    (9) S -> . IF LPAREN RELEXPR RPAREN THEN S IFELSE END S
    (12) S -> . WHILE LPAREN RELEXPR RPAREN S WEND S
    (13) S -> . DO COLON S WHILE LPAREN RELEXPR RPAREN S
    (14) S -> . FOR LPAREN RELEXPR RPAREN S END S
    (15) S -> . O
    (16) S -> . EMPTY
    (39) O -> . O EQUAL O
    (40) O -> . O PLUS TIER1
    (41) O -> . O MINUS TIER1
    (45) O -> . TIER1
    (48) EMPTY -> .
    (42) TIER1 -> . TIER1 MULT TIER2
    (43) TIER1 -> . TIER1 DIV TIER2
    (46) TIER1 -> . TIER2
    (44) TIER2 -> . LPAREN O RPAREN
    (47) TIER2 -> . VAR
    (24) VAR -> . NINT
    (25) VAR -> . NFLOAT
    (26) VAR -> . VECTOR
    (27) VAR -> . MATRIX
    (28) VAR -> . ID
    (31) VECTOR -> . LBRACK NUMTYPE RBRACK
    (32) MATRIX -> . LBRACK NUMTYPE COMMA NUMTYPE RBRACK

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NINT resolved as shift
  ! shift/reduce conflict for NFLOAT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LBRACK resolved as shift
    IF              shift and go to state 15
    WHILE           shift and go to state 17
    DO              shift and go to state 18
    FOR             shift and go to state 19
    PEND            reduce using rule 48 (EMPTY -> .)
    END             reduce using rule 48 (EMPTY -> .)
    LPAREN          shift and go to state 16
    NINT            shift and go to state 25
    NFLOAT          shift and go to state 26
    ID              shift and go to state 29
    LBRACK          shift and go to state 30

  ! IF              [ reduce using rule 48 (EMPTY -> .) ]
  ! WHILE           [ reduce using rule 48 (EMPTY -> .) ]
  ! DO              [ reduce using rule 48 (EMPTY -> .) ]
  ! FOR             [ reduce using rule 48 (EMPTY -> .) ]
  ! LPAREN          [ reduce using rule 48 (EMPTY -> .) ]
  ! NINT            [ reduce using rule 48 (EMPTY -> .) ]
  ! NFLOAT          [ reduce using rule 48 (EMPTY -> .) ]
  ! ID              [ reduce using rule 48 (EMPTY -> .) ]
  ! LBRACK          [ reduce using rule 48 (EMPTY -> .) ]

    S                              shift and go to state 95
    O                              shift and go to state 20
    EMPTY                          shift and go to state 21
    TIER1                          shift and go to state 22
    TIER2                          shift and go to state 23
    VAR                            shift and go to state 24
    VECTOR                         shift and go to state 27
    MATRIX                         shift and go to state 28

state 78

    (2) V -> DIM ID AS VARTYPE V .

    SUBPROCEDURE    reduce using rule 2 (V -> DIM ID AS VARTYPE V .)
    IN              reduce using rule 2 (V -> DIM ID AS VARTYPE V .)
    PRINT           reduce using rule 2 (V -> DIM ID AS VARTYPE V .)
    IF              reduce using rule 2 (V -> DIM ID AS VARTYPE V .)
    WHILE           reduce using rule 2 (V -> DIM ID AS VARTYPE V .)
    DO              reduce using rule 2 (V -> DIM ID AS VARTYPE V .)
    FOR             reduce using rule 2 (V -> DIM ID AS VARTYPE V .)
    LPAREN          reduce using rule 2 (V -> DIM ID AS VARTYPE V .)
    NINT            reduce using rule 2 (V -> DIM ID AS VARTYPE V .)
    NFLOAT          reduce using rule 2 (V -> DIM ID AS VARTYPE V .)
    ID              reduce using rule 2 (V -> DIM ID AS VARTYPE V .)
    LBRACK          reduce using rule 2 (V -> DIM ID AS VARTYPE V .)
    PEND            reduce using rule 2 (V -> DIM ID AS VARTYPE V .)
    END             reduce using rule 2 (V -> DIM ID AS VARTYPE V .)


state 79

    (29) VECDEF -> VEC LBRACK . RBRACK

    RBRACK          shift and go to state 96


state 80

    (30) MATDEF -> MAT LBRACK . RBRACK

    RBRACK          shift and go to state 97


state 81

    (3) V -> LET ID EQUAL VAR V . S
    (9) S -> . IF LPAREN RELEXPR RPAREN THEN S IFELSE END S
    (12) S -> . WHILE LPAREN RELEXPR RPAREN S WEND S
    (13) S -> . DO COLON S WHILE LPAREN RELEXPR RPAREN S
    (14) S -> . FOR LPAREN RELEXPR RPAREN S END S
    (15) S -> . O
    (16) S -> . EMPTY
    (39) O -> . O EQUAL O
    (40) O -> . O PLUS TIER1
    (41) O -> . O MINUS TIER1
    (45) O -> . TIER1
    (48) EMPTY -> .
    (42) TIER1 -> . TIER1 MULT TIER2
    (43) TIER1 -> . TIER1 DIV TIER2
    (46) TIER1 -> . TIER2
    (44) TIER2 -> . LPAREN O RPAREN
    (47) TIER2 -> . VAR
    (24) VAR -> . NINT
    (25) VAR -> . NFLOAT
    (26) VAR -> . VECTOR
    (27) VAR -> . MATRIX
    (28) VAR -> . ID
    (31) VECTOR -> . LBRACK NUMTYPE RBRACK
    (32) MATRIX -> . LBRACK NUMTYPE COMMA NUMTYPE RBRACK

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NINT resolved as shift
  ! shift/reduce conflict for NFLOAT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LBRACK resolved as shift
    IF              shift and go to state 15
    WHILE           shift and go to state 17
    DO              shift and go to state 18
    FOR             shift and go to state 19
    SUBPROCEDURE    reduce using rule 48 (EMPTY -> .)
    IN              reduce using rule 48 (EMPTY -> .)
    PRINT           reduce using rule 48 (EMPTY -> .)
    PEND            reduce using rule 48 (EMPTY -> .)
    END             reduce using rule 48 (EMPTY -> .)
    LPAREN          shift and go to state 16
    NINT            shift and go to state 25
    NFLOAT          shift and go to state 26
    ID              shift and go to state 29
    LBRACK          shift and go to state 30

  ! IF              [ reduce using rule 48 (EMPTY -> .) ]
  ! WHILE           [ reduce using rule 48 (EMPTY -> .) ]
  ! DO              [ reduce using rule 48 (EMPTY -> .) ]
  ! FOR             [ reduce using rule 48 (EMPTY -> .) ]
  ! LPAREN          [ reduce using rule 48 (EMPTY -> .) ]
  ! NINT            [ reduce using rule 48 (EMPTY -> .) ]
  ! NFLOAT          [ reduce using rule 48 (EMPTY -> .) ]
  ! ID              [ reduce using rule 48 (EMPTY -> .) ]
  ! LBRACK          [ reduce using rule 48 (EMPTY -> .) ]

    VAR                            shift and go to state 24
    S                              shift and go to state 98
    O                              shift and go to state 20
    EMPTY                          shift and go to state 21
    TIER1                          shift and go to state 22
    TIER2                          shift and go to state 23
    VECTOR                         shift and go to state 27
    MATRIX                         shift and go to state 28

state 82

    (9) S -> IF LPAREN RELEXPR RPAREN . THEN S IFELSE END S

    THEN            shift and go to state 99


state 83

    (33) RELEXPR -> VAR LT . VAR
    (24) VAR -> . NINT
    (25) VAR -> . NFLOAT
    (26) VAR -> . VECTOR
    (27) VAR -> . MATRIX
    (28) VAR -> . ID
    (31) VECTOR -> . LBRACK NUMTYPE RBRACK
    (32) MATRIX -> . LBRACK NUMTYPE COMMA NUMTYPE RBRACK

    NINT            shift and go to state 25
    NFLOAT          shift and go to state 26
    ID              shift and go to state 29
    LBRACK          shift and go to state 30

    VAR                            shift and go to state 100
    VECTOR                         shift and go to state 27
    MATRIX                         shift and go to state 28

state 84

    (34) RELEXPR -> VAR LE . VAR
    (24) VAR -> . NINT
    (25) VAR -> . NFLOAT
    (26) VAR -> . VECTOR
    (27) VAR -> . MATRIX
    (28) VAR -> . ID
    (31) VECTOR -> . LBRACK NUMTYPE RBRACK
    (32) MATRIX -> . LBRACK NUMTYPE COMMA NUMTYPE RBRACK

    NINT            shift and go to state 25
    NFLOAT          shift and go to state 26
    ID              shift and go to state 29
    LBRACK          shift and go to state 30

    VAR                            shift and go to state 101
    VECTOR                         shift and go to state 27
    MATRIX                         shift and go to state 28

state 85

    (35) RELEXPR -> VAR GT . VAR
    (24) VAR -> . NINT
    (25) VAR -> . NFLOAT
    (26) VAR -> . VECTOR
    (27) VAR -> . MATRIX
    (28) VAR -> . ID
    (31) VECTOR -> . LBRACK NUMTYPE RBRACK
    (32) MATRIX -> . LBRACK NUMTYPE COMMA NUMTYPE RBRACK

    NINT            shift and go to state 25
    NFLOAT          shift and go to state 26
    ID              shift and go to state 29
    LBRACK          shift and go to state 30

    VAR                            shift and go to state 102
    VECTOR                         shift and go to state 27
    MATRIX                         shift and go to state 28

state 86

    (36) RELEXPR -> VAR GE . VAR
    (24) VAR -> . NINT
    (25) VAR -> . NFLOAT
    (26) VAR -> . VECTOR
    (27) VAR -> . MATRIX
    (28) VAR -> . ID
    (31) VECTOR -> . LBRACK NUMTYPE RBRACK
    (32) MATRIX -> . LBRACK NUMTYPE COMMA NUMTYPE RBRACK

    NINT            shift and go to state 25
    NFLOAT          shift and go to state 26
    ID              shift and go to state 29
    LBRACK          shift and go to state 30

    VAR                            shift and go to state 103
    VECTOR                         shift and go to state 27
    MATRIX                         shift and go to state 28

state 87

    (37) RELEXPR -> VAR EQ . VAR
    (24) VAR -> . NINT
    (25) VAR -> . NFLOAT
    (26) VAR -> . VECTOR
    (27) VAR -> . MATRIX
    (28) VAR -> . ID
    (31) VECTOR -> . LBRACK NUMTYPE RBRACK
    (32) MATRIX -> . LBRACK NUMTYPE COMMA NUMTYPE RBRACK

    NINT            shift and go to state 25
    NFLOAT          shift and go to state 26
    ID              shift and go to state 29
    LBRACK          shift and go to state 30

    VAR                            shift and go to state 104
    VECTOR                         shift and go to state 27
    MATRIX                         shift and go to state 28

state 88

    (38) RELEXPR -> VAR NE . VAR
    (24) VAR -> . NINT
    (25) VAR -> . NFLOAT
    (26) VAR -> . VECTOR
    (27) VAR -> . MATRIX
    (28) VAR -> . ID
    (31) VECTOR -> . LBRACK NUMTYPE RBRACK
    (32) MATRIX -> . LBRACK NUMTYPE COMMA NUMTYPE RBRACK

    NINT            shift and go to state 25
    NFLOAT          shift and go to state 26
    ID              shift and go to state 29
    LBRACK          shift and go to state 30

    VAR                            shift and go to state 105
    VECTOR                         shift and go to state 27
    MATRIX                         shift and go to state 28

state 89

    (12) S -> WHILE LPAREN RELEXPR RPAREN . S WEND S
    (9) S -> . IF LPAREN RELEXPR RPAREN THEN S IFELSE END S
    (12) S -> . WHILE LPAREN RELEXPR RPAREN S WEND S
    (13) S -> . DO COLON S WHILE LPAREN RELEXPR RPAREN S
    (14) S -> . FOR LPAREN RELEXPR RPAREN S END S
    (15) S -> . O
    (16) S -> . EMPTY
    (39) O -> . O EQUAL O
    (40) O -> . O PLUS TIER1
    (41) O -> . O MINUS TIER1
    (45) O -> . TIER1
    (48) EMPTY -> .
    (42) TIER1 -> . TIER1 MULT TIER2
    (43) TIER1 -> . TIER1 DIV TIER2
    (46) TIER1 -> . TIER2
    (44) TIER2 -> . LPAREN O RPAREN
    (47) TIER2 -> . VAR
    (24) VAR -> . NINT
    (25) VAR -> . NFLOAT
    (26) VAR -> . VECTOR
    (27) VAR -> . MATRIX
    (28) VAR -> . ID
    (31) VECTOR -> . LBRACK NUMTYPE RBRACK
    (32) MATRIX -> . LBRACK NUMTYPE COMMA NUMTYPE RBRACK

    IF              shift and go to state 15
    WHILE           shift and go to state 17
    DO              shift and go to state 18
    FOR             shift and go to state 19
    WEND            reduce using rule 48 (EMPTY -> .)
    LPAREN          shift and go to state 16
    NINT            shift and go to state 25
    NFLOAT          shift and go to state 26
    ID              shift and go to state 29
    LBRACK          shift and go to state 30

    S                              shift and go to state 106
    O                              shift and go to state 20
    EMPTY                          shift and go to state 21
    TIER1                          shift and go to state 22
    TIER2                          shift and go to state 23
    VAR                            shift and go to state 24
    VECTOR                         shift and go to state 27
    MATRIX                         shift and go to state 28

state 90

    (13) S -> DO COLON S WHILE . LPAREN RELEXPR RPAREN S

    LPAREN          shift and go to state 107


state 91

    (14) S -> FOR LPAREN RELEXPR RPAREN . S END S
    (9) S -> . IF LPAREN RELEXPR RPAREN THEN S IFELSE END S
    (12) S -> . WHILE LPAREN RELEXPR RPAREN S WEND S
    (13) S -> . DO COLON S WHILE LPAREN RELEXPR RPAREN S
    (14) S -> . FOR LPAREN RELEXPR RPAREN S END S
    (15) S -> . O
    (16) S -> . EMPTY
    (39) O -> . O EQUAL O
    (40) O -> . O PLUS TIER1
    (41) O -> . O MINUS TIER1
    (45) O -> . TIER1
    (48) EMPTY -> .
    (42) TIER1 -> . TIER1 MULT TIER2
    (43) TIER1 -> . TIER1 DIV TIER2
    (46) TIER1 -> . TIER2
    (44) TIER2 -> . LPAREN O RPAREN
    (47) TIER2 -> . VAR
    (24) VAR -> . NINT
    (25) VAR -> . NFLOAT
    (26) VAR -> . VECTOR
    (27) VAR -> . MATRIX
    (28) VAR -> . ID
    (31) VECTOR -> . LBRACK NUMTYPE RBRACK
    (32) MATRIX -> . LBRACK NUMTYPE COMMA NUMTYPE RBRACK

    IF              shift and go to state 15
    WHILE           shift and go to state 17
    DO              shift and go to state 18
    FOR             shift and go to state 19
    END             reduce using rule 48 (EMPTY -> .)
    LPAREN          shift and go to state 16
    NINT            shift and go to state 25
    NFLOAT          shift and go to state 26
    ID              shift and go to state 29
    LBRACK          shift and go to state 30

    S                              shift and go to state 108
    O                              shift and go to state 20
    EMPTY                          shift and go to state 21
    TIER1                          shift and go to state 22
    TIER2                          shift and go to state 23
    VAR                            shift and go to state 24
    VECTOR                         shift and go to state 27
    MATRIX                         shift and go to state 28

state 92

    (32) MATRIX -> LBRACK NUMTYPE COMMA NUMTYPE . RBRACK

    RBRACK          shift and go to state 109


state 93

    (5) P -> SUBPROCEDURE LPAREN ID RPAREN V . P S END
    (5) P -> . SUBPROCEDURE LPAREN ID RPAREN V P S END
    (6) P -> . IN LPAREN NUMTYPE RPAREN S
    (7) P -> . PRINT LPAREN NUMTYPE RPAREN S
    (8) P -> . EMPTY
    (48) EMPTY -> .

    SUBPROCEDURE    shift and go to state 8
    IN              shift and go to state 9
    PRINT           shift and go to state 10
    IF              reduce using rule 48 (EMPTY -> .)
    WHILE           reduce using rule 48 (EMPTY -> .)
    DO              reduce using rule 48 (EMPTY -> .)
    FOR             reduce using rule 48 (EMPTY -> .)
    LPAREN          reduce using rule 48 (EMPTY -> .)
    NINT            reduce using rule 48 (EMPTY -> .)
    NFLOAT          reduce using rule 48 (EMPTY -> .)
    ID              reduce using rule 48 (EMPTY -> .)
    LBRACK          reduce using rule 48 (EMPTY -> .)
    END             reduce using rule 48 (EMPTY -> .)

    P                              shift and go to state 110
    EMPTY                          shift and go to state 11

state 94

    (6) P -> IN LPAREN NUMTYPE RPAREN S .

    IF              reduce using rule 6 (P -> IN LPAREN NUMTYPE RPAREN S .)
    WHILE           reduce using rule 6 (P -> IN LPAREN NUMTYPE RPAREN S .)
    DO              reduce using rule 6 (P -> IN LPAREN NUMTYPE RPAREN S .)
    FOR             reduce using rule 6 (P -> IN LPAREN NUMTYPE RPAREN S .)
    LPAREN          reduce using rule 6 (P -> IN LPAREN NUMTYPE RPAREN S .)
    NINT            reduce using rule 6 (P -> IN LPAREN NUMTYPE RPAREN S .)
    NFLOAT          reduce using rule 6 (P -> IN LPAREN NUMTYPE RPAREN S .)
    ID              reduce using rule 6 (P -> IN LPAREN NUMTYPE RPAREN S .)
    LBRACK          reduce using rule 6 (P -> IN LPAREN NUMTYPE RPAREN S .)
    PEND            reduce using rule 6 (P -> IN LPAREN NUMTYPE RPAREN S .)
    END             reduce using rule 6 (P -> IN LPAREN NUMTYPE RPAREN S .)


state 95

    (7) P -> PRINT LPAREN NUMTYPE RPAREN S .

    IF              reduce using rule 7 (P -> PRINT LPAREN NUMTYPE RPAREN S .)
    WHILE           reduce using rule 7 (P -> PRINT LPAREN NUMTYPE RPAREN S .)
    DO              reduce using rule 7 (P -> PRINT LPAREN NUMTYPE RPAREN S .)
    FOR             reduce using rule 7 (P -> PRINT LPAREN NUMTYPE RPAREN S .)
    LPAREN          reduce using rule 7 (P -> PRINT LPAREN NUMTYPE RPAREN S .)
    NINT            reduce using rule 7 (P -> PRINT LPAREN NUMTYPE RPAREN S .)
    NFLOAT          reduce using rule 7 (P -> PRINT LPAREN NUMTYPE RPAREN S .)
    ID              reduce using rule 7 (P -> PRINT LPAREN NUMTYPE RPAREN S .)
    LBRACK          reduce using rule 7 (P -> PRINT LPAREN NUMTYPE RPAREN S .)
    PEND            reduce using rule 7 (P -> PRINT LPAREN NUMTYPE RPAREN S .)
    END             reduce using rule 7 (P -> PRINT LPAREN NUMTYPE RPAREN S .)


state 96

    (29) VECDEF -> VEC LBRACK RBRACK .

    DIM             reduce using rule 29 (VECDEF -> VEC LBRACK RBRACK .)
    LET             reduce using rule 29 (VECDEF -> VEC LBRACK RBRACK .)
    SUBPROCEDURE    reduce using rule 29 (VECDEF -> VEC LBRACK RBRACK .)
    IN              reduce using rule 29 (VECDEF -> VEC LBRACK RBRACK .)
    PRINT           reduce using rule 29 (VECDEF -> VEC LBRACK RBRACK .)
    IF              reduce using rule 29 (VECDEF -> VEC LBRACK RBRACK .)
    WHILE           reduce using rule 29 (VECDEF -> VEC LBRACK RBRACK .)
    DO              reduce using rule 29 (VECDEF -> VEC LBRACK RBRACK .)
    FOR             reduce using rule 29 (VECDEF -> VEC LBRACK RBRACK .)
    LPAREN          reduce using rule 29 (VECDEF -> VEC LBRACK RBRACK .)
    NINT            reduce using rule 29 (VECDEF -> VEC LBRACK RBRACK .)
    NFLOAT          reduce using rule 29 (VECDEF -> VEC LBRACK RBRACK .)
    ID              reduce using rule 29 (VECDEF -> VEC LBRACK RBRACK .)
    LBRACK          reduce using rule 29 (VECDEF -> VEC LBRACK RBRACK .)
    PEND            reduce using rule 29 (VECDEF -> VEC LBRACK RBRACK .)
    END             reduce using rule 29 (VECDEF -> VEC LBRACK RBRACK .)


state 97

    (30) MATDEF -> MAT LBRACK RBRACK .

    DIM             reduce using rule 30 (MATDEF -> MAT LBRACK RBRACK .)
    LET             reduce using rule 30 (MATDEF -> MAT LBRACK RBRACK .)
    SUBPROCEDURE    reduce using rule 30 (MATDEF -> MAT LBRACK RBRACK .)
    IN              reduce using rule 30 (MATDEF -> MAT LBRACK RBRACK .)
    PRINT           reduce using rule 30 (MATDEF -> MAT LBRACK RBRACK .)
    IF              reduce using rule 30 (MATDEF -> MAT LBRACK RBRACK .)
    WHILE           reduce using rule 30 (MATDEF -> MAT LBRACK RBRACK .)
    DO              reduce using rule 30 (MATDEF -> MAT LBRACK RBRACK .)
    FOR             reduce using rule 30 (MATDEF -> MAT LBRACK RBRACK .)
    LPAREN          reduce using rule 30 (MATDEF -> MAT LBRACK RBRACK .)
    NINT            reduce using rule 30 (MATDEF -> MAT LBRACK RBRACK .)
    NFLOAT          reduce using rule 30 (MATDEF -> MAT LBRACK RBRACK .)
    ID              reduce using rule 30 (MATDEF -> MAT LBRACK RBRACK .)
    LBRACK          reduce using rule 30 (MATDEF -> MAT LBRACK RBRACK .)
    PEND            reduce using rule 30 (MATDEF -> MAT LBRACK RBRACK .)
    END             reduce using rule 30 (MATDEF -> MAT LBRACK RBRACK .)


state 98

    (3) V -> LET ID EQUAL VAR V S .

    SUBPROCEDURE    reduce using rule 3 (V -> LET ID EQUAL VAR V S .)
    IN              reduce using rule 3 (V -> LET ID EQUAL VAR V S .)
    PRINT           reduce using rule 3 (V -> LET ID EQUAL VAR V S .)
    IF              reduce using rule 3 (V -> LET ID EQUAL VAR V S .)
    WHILE           reduce using rule 3 (V -> LET ID EQUAL VAR V S .)
    DO              reduce using rule 3 (V -> LET ID EQUAL VAR V S .)
    FOR             reduce using rule 3 (V -> LET ID EQUAL VAR V S .)
    LPAREN          reduce using rule 3 (V -> LET ID EQUAL VAR V S .)
    NINT            reduce using rule 3 (V -> LET ID EQUAL VAR V S .)
    NFLOAT          reduce using rule 3 (V -> LET ID EQUAL VAR V S .)
    ID              reduce using rule 3 (V -> LET ID EQUAL VAR V S .)
    LBRACK          reduce using rule 3 (V -> LET ID EQUAL VAR V S .)
    PEND            reduce using rule 3 (V -> LET ID EQUAL VAR V S .)
    END             reduce using rule 3 (V -> LET ID EQUAL VAR V S .)


state 99

    (9) S -> IF LPAREN RELEXPR RPAREN THEN . S IFELSE END S
    (9) S -> . IF LPAREN RELEXPR RPAREN THEN S IFELSE END S
    (12) S -> . WHILE LPAREN RELEXPR RPAREN S WEND S
    (13) S -> . DO COLON S WHILE LPAREN RELEXPR RPAREN S
    (14) S -> . FOR LPAREN RELEXPR RPAREN S END S
    (15) S -> . O
    (16) S -> . EMPTY
    (39) O -> . O EQUAL O
    (40) O -> . O PLUS TIER1
    (41) O -> . O MINUS TIER1
    (45) O -> . TIER1
    (48) EMPTY -> .
    (42) TIER1 -> . TIER1 MULT TIER2
    (43) TIER1 -> . TIER1 DIV TIER2
    (46) TIER1 -> . TIER2
    (44) TIER2 -> . LPAREN O RPAREN
    (47) TIER2 -> . VAR
    (24) VAR -> . NINT
    (25) VAR -> . NFLOAT
    (26) VAR -> . VECTOR
    (27) VAR -> . MATRIX
    (28) VAR -> . ID
    (31) VECTOR -> . LBRACK NUMTYPE RBRACK
    (32) MATRIX -> . LBRACK NUMTYPE COMMA NUMTYPE RBRACK

    IF              shift and go to state 15
    WHILE           shift and go to state 17
    DO              shift and go to state 18
    FOR             shift and go to state 19
    ELSE            reduce using rule 48 (EMPTY -> .)
    END             reduce using rule 48 (EMPTY -> .)
    LPAREN          shift and go to state 16
    NINT            shift and go to state 25
    NFLOAT          shift and go to state 26
    ID              shift and go to state 29
    LBRACK          shift and go to state 30

    S                              shift and go to state 111
    O                              shift and go to state 20
    EMPTY                          shift and go to state 21
    TIER1                          shift and go to state 22
    TIER2                          shift and go to state 23
    VAR                            shift and go to state 24
    VECTOR                         shift and go to state 27
    MATRIX                         shift and go to state 28

state 100

    (33) RELEXPR -> VAR LT VAR .

    RPAREN          reduce using rule 33 (RELEXPR -> VAR LT VAR .)


state 101

    (34) RELEXPR -> VAR LE VAR .

    RPAREN          reduce using rule 34 (RELEXPR -> VAR LE VAR .)


state 102

    (35) RELEXPR -> VAR GT VAR .

    RPAREN          reduce using rule 35 (RELEXPR -> VAR GT VAR .)


state 103

    (36) RELEXPR -> VAR GE VAR .

    RPAREN          reduce using rule 36 (RELEXPR -> VAR GE VAR .)


state 104

    (37) RELEXPR -> VAR EQ VAR .

    RPAREN          reduce using rule 37 (RELEXPR -> VAR EQ VAR .)


state 105

    (38) RELEXPR -> VAR NE VAR .

    RPAREN          reduce using rule 38 (RELEXPR -> VAR NE VAR .)


state 106

    (12) S -> WHILE LPAREN RELEXPR RPAREN S . WEND S

    WEND            shift and go to state 112


state 107

    (13) S -> DO COLON S WHILE LPAREN . RELEXPR RPAREN S
    (33) RELEXPR -> . VAR LT VAR
    (34) RELEXPR -> . VAR LE VAR
    (35) RELEXPR -> . VAR GT VAR
    (36) RELEXPR -> . VAR GE VAR
    (37) RELEXPR -> . VAR EQ VAR
    (38) RELEXPR -> . VAR NE VAR
    (24) VAR -> . NINT
    (25) VAR -> . NFLOAT
    (26) VAR -> . VECTOR
    (27) VAR -> . MATRIX
    (28) VAR -> . ID
    (31) VECTOR -> . LBRACK NUMTYPE RBRACK
    (32) MATRIX -> . LBRACK NUMTYPE COMMA NUMTYPE RBRACK

    NINT            shift and go to state 25
    NFLOAT          shift and go to state 26
    ID              shift and go to state 29
    LBRACK          shift and go to state 30

    RELEXPR                        shift and go to state 113
    VAR                            shift and go to state 63
    VECTOR                         shift and go to state 27
    MATRIX                         shift and go to state 28

state 108

    (14) S -> FOR LPAREN RELEXPR RPAREN S . END S

    END             shift and go to state 114


state 109

    (32) MATRIX -> LBRACK NUMTYPE COMMA NUMTYPE RBRACK .

    MULT            reduce using rule 32 (MATRIX -> LBRACK NUMTYPE COMMA NUMTYPE RBRACK .)
    DIV             reduce using rule 32 (MATRIX -> LBRACK NUMTYPE COMMA NUMTYPE RBRACK .)
    EQUAL           reduce using rule 32 (MATRIX -> LBRACK NUMTYPE COMMA NUMTYPE RBRACK .)
    PLUS            reduce using rule 32 (MATRIX -> LBRACK NUMTYPE COMMA NUMTYPE RBRACK .)
    MINUS           reduce using rule 32 (MATRIX -> LBRACK NUMTYPE COMMA NUMTYPE RBRACK .)
    PEND            reduce using rule 32 (MATRIX -> LBRACK NUMTYPE COMMA NUMTYPE RBRACK .)
    RPAREN          reduce using rule 32 (MATRIX -> LBRACK NUMTYPE COMMA NUMTYPE RBRACK .)
    DIM             reduce using rule 32 (MATRIX -> LBRACK NUMTYPE COMMA NUMTYPE RBRACK .)
    LET             reduce using rule 32 (MATRIX -> LBRACK NUMTYPE COMMA NUMTYPE RBRACK .)
    IF              reduce using rule 32 (MATRIX -> LBRACK NUMTYPE COMMA NUMTYPE RBRACK .)
    WHILE           reduce using rule 32 (MATRIX -> LBRACK NUMTYPE COMMA NUMTYPE RBRACK .)
    DO              reduce using rule 32 (MATRIX -> LBRACK NUMTYPE COMMA NUMTYPE RBRACK .)
    FOR             reduce using rule 32 (MATRIX -> LBRACK NUMTYPE COMMA NUMTYPE RBRACK .)
    LPAREN          reduce using rule 32 (MATRIX -> LBRACK NUMTYPE COMMA NUMTYPE RBRACK .)
    NINT            reduce using rule 32 (MATRIX -> LBRACK NUMTYPE COMMA NUMTYPE RBRACK .)
    NFLOAT          reduce using rule 32 (MATRIX -> LBRACK NUMTYPE COMMA NUMTYPE RBRACK .)
    ID              reduce using rule 32 (MATRIX -> LBRACK NUMTYPE COMMA NUMTYPE RBRACK .)
    LBRACK          reduce using rule 32 (MATRIX -> LBRACK NUMTYPE COMMA NUMTYPE RBRACK .)
    SUBPROCEDURE    reduce using rule 32 (MATRIX -> LBRACK NUMTYPE COMMA NUMTYPE RBRACK .)
    IN              reduce using rule 32 (MATRIX -> LBRACK NUMTYPE COMMA NUMTYPE RBRACK .)
    PRINT           reduce using rule 32 (MATRIX -> LBRACK NUMTYPE COMMA NUMTYPE RBRACK .)
    END             reduce using rule 32 (MATRIX -> LBRACK NUMTYPE COMMA NUMTYPE RBRACK .)
    LT              reduce using rule 32 (MATRIX -> LBRACK NUMTYPE COMMA NUMTYPE RBRACK .)
    LE              reduce using rule 32 (MATRIX -> LBRACK NUMTYPE COMMA NUMTYPE RBRACK .)
    GT              reduce using rule 32 (MATRIX -> LBRACK NUMTYPE COMMA NUMTYPE RBRACK .)
    GE              reduce using rule 32 (MATRIX -> LBRACK NUMTYPE COMMA NUMTYPE RBRACK .)
    EQ              reduce using rule 32 (MATRIX -> LBRACK NUMTYPE COMMA NUMTYPE RBRACK .)
    NE              reduce using rule 32 (MATRIX -> LBRACK NUMTYPE COMMA NUMTYPE RBRACK .)
    WEND            reduce using rule 32 (MATRIX -> LBRACK NUMTYPE COMMA NUMTYPE RBRACK .)
    ELSE            reduce using rule 32 (MATRIX -> LBRACK NUMTYPE COMMA NUMTYPE RBRACK .)


state 110

    (5) P -> SUBPROCEDURE LPAREN ID RPAREN V P . S END
    (9) S -> . IF LPAREN RELEXPR RPAREN THEN S IFELSE END S
    (12) S -> . WHILE LPAREN RELEXPR RPAREN S WEND S
    (13) S -> . DO COLON S WHILE LPAREN RELEXPR RPAREN S
    (14) S -> . FOR LPAREN RELEXPR RPAREN S END S
    (15) S -> . O
    (16) S -> . EMPTY
    (39) O -> . O EQUAL O
    (40) O -> . O PLUS TIER1
    (41) O -> . O MINUS TIER1
    (45) O -> . TIER1
    (48) EMPTY -> .
    (42) TIER1 -> . TIER1 MULT TIER2
    (43) TIER1 -> . TIER1 DIV TIER2
    (46) TIER1 -> . TIER2
    (44) TIER2 -> . LPAREN O RPAREN
    (47) TIER2 -> . VAR
    (24) VAR -> . NINT
    (25) VAR -> . NFLOAT
    (26) VAR -> . VECTOR
    (27) VAR -> . MATRIX
    (28) VAR -> . ID
    (31) VECTOR -> . LBRACK NUMTYPE RBRACK
    (32) MATRIX -> . LBRACK NUMTYPE COMMA NUMTYPE RBRACK

    IF              shift and go to state 15
    WHILE           shift and go to state 17
    DO              shift and go to state 18
    FOR             shift and go to state 19
    END             reduce using rule 48 (EMPTY -> .)
    LPAREN          shift and go to state 16
    NINT            shift and go to state 25
    NFLOAT          shift and go to state 26
    ID              shift and go to state 29
    LBRACK          shift and go to state 30

    S                              shift and go to state 115
    O                              shift and go to state 20
    EMPTY                          shift and go to state 21
    TIER1                          shift and go to state 22
    TIER2                          shift and go to state 23
    VAR                            shift and go to state 24
    VECTOR                         shift and go to state 27
    MATRIX                         shift and go to state 28

state 111

    (9) S -> IF LPAREN RELEXPR RPAREN THEN S . IFELSE END S
    (10) IFELSE -> . ELSE THEN S
    (11) IFELSE -> .

    ELSE            shift and go to state 117
    END             reduce using rule 11 (IFELSE -> .)

    IFELSE                         shift and go to state 116

state 112

    (12) S -> WHILE LPAREN RELEXPR RPAREN S WEND . S
    (9) S -> . IF LPAREN RELEXPR RPAREN THEN S IFELSE END S
    (12) S -> . WHILE LPAREN RELEXPR RPAREN S WEND S
    (13) S -> . DO COLON S WHILE LPAREN RELEXPR RPAREN S
    (14) S -> . FOR LPAREN RELEXPR RPAREN S END S
    (15) S -> . O
    (16) S -> . EMPTY
    (39) O -> . O EQUAL O
    (40) O -> . O PLUS TIER1
    (41) O -> . O MINUS TIER1
    (45) O -> . TIER1
    (48) EMPTY -> .
    (42) TIER1 -> . TIER1 MULT TIER2
    (43) TIER1 -> . TIER1 DIV TIER2
    (46) TIER1 -> . TIER2
    (44) TIER2 -> . LPAREN O RPAREN
    (47) TIER2 -> . VAR
    (24) VAR -> . NINT
    (25) VAR -> . NFLOAT
    (26) VAR -> . VECTOR
    (27) VAR -> . MATRIX
    (28) VAR -> . ID
    (31) VECTOR -> . LBRACK NUMTYPE RBRACK
    (32) MATRIX -> . LBRACK NUMTYPE COMMA NUMTYPE RBRACK

  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NINT resolved as shift
  ! shift/reduce conflict for NFLOAT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LBRACK resolved as shift
    IF              shift and go to state 15
    WHILE           shift and go to state 17
    DO              shift and go to state 18
    FOR             shift and go to state 19
    PEND            reduce using rule 48 (EMPTY -> .)
    END             reduce using rule 48 (EMPTY -> .)
    SUBPROCEDURE    reduce using rule 48 (EMPTY -> .)
    IN              reduce using rule 48 (EMPTY -> .)
    PRINT           reduce using rule 48 (EMPTY -> .)
    WEND            reduce using rule 48 (EMPTY -> .)
    ELSE            reduce using rule 48 (EMPTY -> .)
    LPAREN          shift and go to state 16
    NINT            shift and go to state 25
    NFLOAT          shift and go to state 26
    ID              shift and go to state 29
    LBRACK          shift and go to state 30

  ! WHILE           [ reduce using rule 48 (EMPTY -> .) ]
  ! IF              [ reduce using rule 48 (EMPTY -> .) ]
  ! DO              [ reduce using rule 48 (EMPTY -> .) ]
  ! FOR             [ reduce using rule 48 (EMPTY -> .) ]
  ! LPAREN          [ reduce using rule 48 (EMPTY -> .) ]
  ! NINT            [ reduce using rule 48 (EMPTY -> .) ]
  ! NFLOAT          [ reduce using rule 48 (EMPTY -> .) ]
  ! ID              [ reduce using rule 48 (EMPTY -> .) ]
  ! LBRACK          [ reduce using rule 48 (EMPTY -> .) ]

    S                              shift and go to state 118
    O                              shift and go to state 20
    EMPTY                          shift and go to state 21
    TIER1                          shift and go to state 22
    TIER2                          shift and go to state 23
    VAR                            shift and go to state 24
    VECTOR                         shift and go to state 27
    MATRIX                         shift and go to state 28

state 113

    (13) S -> DO COLON S WHILE LPAREN RELEXPR . RPAREN S

    RPAREN          shift and go to state 119


state 114

    (14) S -> FOR LPAREN RELEXPR RPAREN S END . S
    (9) S -> . IF LPAREN RELEXPR RPAREN THEN S IFELSE END S
    (12) S -> . WHILE LPAREN RELEXPR RPAREN S WEND S
    (13) S -> . DO COLON S WHILE LPAREN RELEXPR RPAREN S
    (14) S -> . FOR LPAREN RELEXPR RPAREN S END S
    (15) S -> . O
    (16) S -> . EMPTY
    (39) O -> . O EQUAL O
    (40) O -> . O PLUS TIER1
    (41) O -> . O MINUS TIER1
    (45) O -> . TIER1
    (48) EMPTY -> .
    (42) TIER1 -> . TIER1 MULT TIER2
    (43) TIER1 -> . TIER1 DIV TIER2
    (46) TIER1 -> . TIER2
    (44) TIER2 -> . LPAREN O RPAREN
    (47) TIER2 -> . VAR
    (24) VAR -> . NINT
    (25) VAR -> . NFLOAT
    (26) VAR -> . VECTOR
    (27) VAR -> . MATRIX
    (28) VAR -> . ID
    (31) VECTOR -> . LBRACK NUMTYPE RBRACK
    (32) MATRIX -> . LBRACK NUMTYPE COMMA NUMTYPE RBRACK

  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NINT resolved as shift
  ! shift/reduce conflict for NFLOAT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LBRACK resolved as shift
    IF              shift and go to state 15
    WHILE           shift and go to state 17
    DO              shift and go to state 18
    FOR             shift and go to state 19
    PEND            reduce using rule 48 (EMPTY -> .)
    END             reduce using rule 48 (EMPTY -> .)
    SUBPROCEDURE    reduce using rule 48 (EMPTY -> .)
    IN              reduce using rule 48 (EMPTY -> .)
    PRINT           reduce using rule 48 (EMPTY -> .)
    WEND            reduce using rule 48 (EMPTY -> .)
    ELSE            reduce using rule 48 (EMPTY -> .)
    LPAREN          shift and go to state 16
    NINT            shift and go to state 25
    NFLOAT          shift and go to state 26
    ID              shift and go to state 29
    LBRACK          shift and go to state 30

  ! WHILE           [ reduce using rule 48 (EMPTY -> .) ]
  ! IF              [ reduce using rule 48 (EMPTY -> .) ]
  ! DO              [ reduce using rule 48 (EMPTY -> .) ]
  ! FOR             [ reduce using rule 48 (EMPTY -> .) ]
  ! LPAREN          [ reduce using rule 48 (EMPTY -> .) ]
  ! NINT            [ reduce using rule 48 (EMPTY -> .) ]
  ! NFLOAT          [ reduce using rule 48 (EMPTY -> .) ]
  ! ID              [ reduce using rule 48 (EMPTY -> .) ]
  ! LBRACK          [ reduce using rule 48 (EMPTY -> .) ]

    S                              shift and go to state 120
    O                              shift and go to state 20
    EMPTY                          shift and go to state 21
    TIER1                          shift and go to state 22
    TIER2                          shift and go to state 23
    VAR                            shift and go to state 24
    VECTOR                         shift and go to state 27
    MATRIX                         shift and go to state 28

state 115

    (5) P -> SUBPROCEDURE LPAREN ID RPAREN V P S . END

    END             shift and go to state 121


state 116

    (9) S -> IF LPAREN RELEXPR RPAREN THEN S IFELSE . END S

    END             shift and go to state 122


state 117

    (10) IFELSE -> ELSE . THEN S

    THEN            shift and go to state 123


state 118

    (12) S -> WHILE LPAREN RELEXPR RPAREN S WEND S .

    PEND            reduce using rule 12 (S -> WHILE LPAREN RELEXPR RPAREN S WEND S .)
    WHILE           reduce using rule 12 (S -> WHILE LPAREN RELEXPR RPAREN S WEND S .)
    IF              reduce using rule 12 (S -> WHILE LPAREN RELEXPR RPAREN S WEND S .)
    DO              reduce using rule 12 (S -> WHILE LPAREN RELEXPR RPAREN S WEND S .)
    FOR             reduce using rule 12 (S -> WHILE LPAREN RELEXPR RPAREN S WEND S .)
    LPAREN          reduce using rule 12 (S -> WHILE LPAREN RELEXPR RPAREN S WEND S .)
    NINT            reduce using rule 12 (S -> WHILE LPAREN RELEXPR RPAREN S WEND S .)
    NFLOAT          reduce using rule 12 (S -> WHILE LPAREN RELEXPR RPAREN S WEND S .)
    ID              reduce using rule 12 (S -> WHILE LPAREN RELEXPR RPAREN S WEND S .)
    LBRACK          reduce using rule 12 (S -> WHILE LPAREN RELEXPR RPAREN S WEND S .)
    END             reduce using rule 12 (S -> WHILE LPAREN RELEXPR RPAREN S WEND S .)
    SUBPROCEDURE    reduce using rule 12 (S -> WHILE LPAREN RELEXPR RPAREN S WEND S .)
    IN              reduce using rule 12 (S -> WHILE LPAREN RELEXPR RPAREN S WEND S .)
    PRINT           reduce using rule 12 (S -> WHILE LPAREN RELEXPR RPAREN S WEND S .)
    WEND            reduce using rule 12 (S -> WHILE LPAREN RELEXPR RPAREN S WEND S .)
    ELSE            reduce using rule 12 (S -> WHILE LPAREN RELEXPR RPAREN S WEND S .)


state 119

    (13) S -> DO COLON S WHILE LPAREN RELEXPR RPAREN . S
    (9) S -> . IF LPAREN RELEXPR RPAREN THEN S IFELSE END S
    (12) S -> . WHILE LPAREN RELEXPR RPAREN S WEND S
    (13) S -> . DO COLON S WHILE LPAREN RELEXPR RPAREN S
    (14) S -> . FOR LPAREN RELEXPR RPAREN S END S
    (15) S -> . O
    (16) S -> . EMPTY
    (39) O -> . O EQUAL O
    (40) O -> . O PLUS TIER1
    (41) O -> . O MINUS TIER1
    (45) O -> . TIER1
    (48) EMPTY -> .
    (42) TIER1 -> . TIER1 MULT TIER2
    (43) TIER1 -> . TIER1 DIV TIER2
    (46) TIER1 -> . TIER2
    (44) TIER2 -> . LPAREN O RPAREN
    (47) TIER2 -> . VAR
    (24) VAR -> . NINT
    (25) VAR -> . NFLOAT
    (26) VAR -> . VECTOR
    (27) VAR -> . MATRIX
    (28) VAR -> . ID
    (31) VECTOR -> . LBRACK NUMTYPE RBRACK
    (32) MATRIX -> . LBRACK NUMTYPE COMMA NUMTYPE RBRACK

  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NINT resolved as shift
  ! shift/reduce conflict for NFLOAT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LBRACK resolved as shift
    IF              shift and go to state 15
    WHILE           shift and go to state 17
    DO              shift and go to state 18
    FOR             shift and go to state 19
    PEND            reduce using rule 48 (EMPTY -> .)
    END             reduce using rule 48 (EMPTY -> .)
    SUBPROCEDURE    reduce using rule 48 (EMPTY -> .)
    IN              reduce using rule 48 (EMPTY -> .)
    PRINT           reduce using rule 48 (EMPTY -> .)
    WEND            reduce using rule 48 (EMPTY -> .)
    ELSE            reduce using rule 48 (EMPTY -> .)
    LPAREN          shift and go to state 16
    NINT            shift and go to state 25
    NFLOAT          shift and go to state 26
    ID              shift and go to state 29
    LBRACK          shift and go to state 30

  ! WHILE           [ reduce using rule 48 (EMPTY -> .) ]
  ! IF              [ reduce using rule 48 (EMPTY -> .) ]
  ! DO              [ reduce using rule 48 (EMPTY -> .) ]
  ! FOR             [ reduce using rule 48 (EMPTY -> .) ]
  ! LPAREN          [ reduce using rule 48 (EMPTY -> .) ]
  ! NINT            [ reduce using rule 48 (EMPTY -> .) ]
  ! NFLOAT          [ reduce using rule 48 (EMPTY -> .) ]
  ! ID              [ reduce using rule 48 (EMPTY -> .) ]
  ! LBRACK          [ reduce using rule 48 (EMPTY -> .) ]

    S                              shift and go to state 124
    O                              shift and go to state 20
    EMPTY                          shift and go to state 21
    TIER1                          shift and go to state 22
    TIER2                          shift and go to state 23
    VAR                            shift and go to state 24
    VECTOR                         shift and go to state 27
    MATRIX                         shift and go to state 28

state 120

    (14) S -> FOR LPAREN RELEXPR RPAREN S END S .

    PEND            reduce using rule 14 (S -> FOR LPAREN RELEXPR RPAREN S END S .)
    WHILE           reduce using rule 14 (S -> FOR LPAREN RELEXPR RPAREN S END S .)
    IF              reduce using rule 14 (S -> FOR LPAREN RELEXPR RPAREN S END S .)
    DO              reduce using rule 14 (S -> FOR LPAREN RELEXPR RPAREN S END S .)
    FOR             reduce using rule 14 (S -> FOR LPAREN RELEXPR RPAREN S END S .)
    LPAREN          reduce using rule 14 (S -> FOR LPAREN RELEXPR RPAREN S END S .)
    NINT            reduce using rule 14 (S -> FOR LPAREN RELEXPR RPAREN S END S .)
    NFLOAT          reduce using rule 14 (S -> FOR LPAREN RELEXPR RPAREN S END S .)
    ID              reduce using rule 14 (S -> FOR LPAREN RELEXPR RPAREN S END S .)
    LBRACK          reduce using rule 14 (S -> FOR LPAREN RELEXPR RPAREN S END S .)
    END             reduce using rule 14 (S -> FOR LPAREN RELEXPR RPAREN S END S .)
    SUBPROCEDURE    reduce using rule 14 (S -> FOR LPAREN RELEXPR RPAREN S END S .)
    IN              reduce using rule 14 (S -> FOR LPAREN RELEXPR RPAREN S END S .)
    PRINT           reduce using rule 14 (S -> FOR LPAREN RELEXPR RPAREN S END S .)
    WEND            reduce using rule 14 (S -> FOR LPAREN RELEXPR RPAREN S END S .)
    ELSE            reduce using rule 14 (S -> FOR LPAREN RELEXPR RPAREN S END S .)


state 121

    (5) P -> SUBPROCEDURE LPAREN ID RPAREN V P S END .

    IF              reduce using rule 5 (P -> SUBPROCEDURE LPAREN ID RPAREN V P S END .)
    WHILE           reduce using rule 5 (P -> SUBPROCEDURE LPAREN ID RPAREN V P S END .)
    DO              reduce using rule 5 (P -> SUBPROCEDURE LPAREN ID RPAREN V P S END .)
    FOR             reduce using rule 5 (P -> SUBPROCEDURE LPAREN ID RPAREN V P S END .)
    LPAREN          reduce using rule 5 (P -> SUBPROCEDURE LPAREN ID RPAREN V P S END .)
    NINT            reduce using rule 5 (P -> SUBPROCEDURE LPAREN ID RPAREN V P S END .)
    NFLOAT          reduce using rule 5 (P -> SUBPROCEDURE LPAREN ID RPAREN V P S END .)
    ID              reduce using rule 5 (P -> SUBPROCEDURE LPAREN ID RPAREN V P S END .)
    LBRACK          reduce using rule 5 (P -> SUBPROCEDURE LPAREN ID RPAREN V P S END .)
    PEND            reduce using rule 5 (P -> SUBPROCEDURE LPAREN ID RPAREN V P S END .)
    END             reduce using rule 5 (P -> SUBPROCEDURE LPAREN ID RPAREN V P S END .)


state 122

    (9) S -> IF LPAREN RELEXPR RPAREN THEN S IFELSE END . S
    (9) S -> . IF LPAREN RELEXPR RPAREN THEN S IFELSE END S
    (12) S -> . WHILE LPAREN RELEXPR RPAREN S WEND S
    (13) S -> . DO COLON S WHILE LPAREN RELEXPR RPAREN S
    (14) S -> . FOR LPAREN RELEXPR RPAREN S END S
    (15) S -> . O
    (16) S -> . EMPTY
    (39) O -> . O EQUAL O
    (40) O -> . O PLUS TIER1
    (41) O -> . O MINUS TIER1
    (45) O -> . TIER1
    (48) EMPTY -> .
    (42) TIER1 -> . TIER1 MULT TIER2
    (43) TIER1 -> . TIER1 DIV TIER2
    (46) TIER1 -> . TIER2
    (44) TIER2 -> . LPAREN O RPAREN
    (47) TIER2 -> . VAR
    (24) VAR -> . NINT
    (25) VAR -> . NFLOAT
    (26) VAR -> . VECTOR
    (27) VAR -> . MATRIX
    (28) VAR -> . ID
    (31) VECTOR -> . LBRACK NUMTYPE RBRACK
    (32) MATRIX -> . LBRACK NUMTYPE COMMA NUMTYPE RBRACK

  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NINT resolved as shift
  ! shift/reduce conflict for NFLOAT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LBRACK resolved as shift
    IF              shift and go to state 15
    WHILE           shift and go to state 17
    DO              shift and go to state 18
    FOR             shift and go to state 19
    PEND            reduce using rule 48 (EMPTY -> .)
    END             reduce using rule 48 (EMPTY -> .)
    SUBPROCEDURE    reduce using rule 48 (EMPTY -> .)
    IN              reduce using rule 48 (EMPTY -> .)
    PRINT           reduce using rule 48 (EMPTY -> .)
    WEND            reduce using rule 48 (EMPTY -> .)
    ELSE            reduce using rule 48 (EMPTY -> .)
    LPAREN          shift and go to state 16
    NINT            shift and go to state 25
    NFLOAT          shift and go to state 26
    ID              shift and go to state 29
    LBRACK          shift and go to state 30

  ! WHILE           [ reduce using rule 48 (EMPTY -> .) ]
  ! IF              [ reduce using rule 48 (EMPTY -> .) ]
  ! DO              [ reduce using rule 48 (EMPTY -> .) ]
  ! FOR             [ reduce using rule 48 (EMPTY -> .) ]
  ! LPAREN          [ reduce using rule 48 (EMPTY -> .) ]
  ! NINT            [ reduce using rule 48 (EMPTY -> .) ]
  ! NFLOAT          [ reduce using rule 48 (EMPTY -> .) ]
  ! ID              [ reduce using rule 48 (EMPTY -> .) ]
  ! LBRACK          [ reduce using rule 48 (EMPTY -> .) ]

    S                              shift and go to state 125
    O                              shift and go to state 20
    EMPTY                          shift and go to state 21
    TIER1                          shift and go to state 22
    TIER2                          shift and go to state 23
    VAR                            shift and go to state 24
    VECTOR                         shift and go to state 27
    MATRIX                         shift and go to state 28

state 123

    (10) IFELSE -> ELSE THEN . S
    (9) S -> . IF LPAREN RELEXPR RPAREN THEN S IFELSE END S
    (12) S -> . WHILE LPAREN RELEXPR RPAREN S WEND S
    (13) S -> . DO COLON S WHILE LPAREN RELEXPR RPAREN S
    (14) S -> . FOR LPAREN RELEXPR RPAREN S END S
    (15) S -> . O
    (16) S -> . EMPTY
    (39) O -> . O EQUAL O
    (40) O -> . O PLUS TIER1
    (41) O -> . O MINUS TIER1
    (45) O -> . TIER1
    (48) EMPTY -> .
    (42) TIER1 -> . TIER1 MULT TIER2
    (43) TIER1 -> . TIER1 DIV TIER2
    (46) TIER1 -> . TIER2
    (44) TIER2 -> . LPAREN O RPAREN
    (47) TIER2 -> . VAR
    (24) VAR -> . NINT
    (25) VAR -> . NFLOAT
    (26) VAR -> . VECTOR
    (27) VAR -> . MATRIX
    (28) VAR -> . ID
    (31) VECTOR -> . LBRACK NUMTYPE RBRACK
    (32) MATRIX -> . LBRACK NUMTYPE COMMA NUMTYPE RBRACK

    IF              shift and go to state 15
    WHILE           shift and go to state 17
    DO              shift and go to state 18
    FOR             shift and go to state 19
    END             reduce using rule 48 (EMPTY -> .)
    LPAREN          shift and go to state 16
    NINT            shift and go to state 25
    NFLOAT          shift and go to state 26
    ID              shift and go to state 29
    LBRACK          shift and go to state 30

    S                              shift and go to state 126
    O                              shift and go to state 20
    EMPTY                          shift and go to state 21
    TIER1                          shift and go to state 22
    TIER2                          shift and go to state 23
    VAR                            shift and go to state 24
    VECTOR                         shift and go to state 27
    MATRIX                         shift and go to state 28

state 124

    (13) S -> DO COLON S WHILE LPAREN RELEXPR RPAREN S .

    PEND            reduce using rule 13 (S -> DO COLON S WHILE LPAREN RELEXPR RPAREN S .)
    WHILE           reduce using rule 13 (S -> DO COLON S WHILE LPAREN RELEXPR RPAREN S .)
    IF              reduce using rule 13 (S -> DO COLON S WHILE LPAREN RELEXPR RPAREN S .)
    DO              reduce using rule 13 (S -> DO COLON S WHILE LPAREN RELEXPR RPAREN S .)
    FOR             reduce using rule 13 (S -> DO COLON S WHILE LPAREN RELEXPR RPAREN S .)
    LPAREN          reduce using rule 13 (S -> DO COLON S WHILE LPAREN RELEXPR RPAREN S .)
    NINT            reduce using rule 13 (S -> DO COLON S WHILE LPAREN RELEXPR RPAREN S .)
    NFLOAT          reduce using rule 13 (S -> DO COLON S WHILE LPAREN RELEXPR RPAREN S .)
    ID              reduce using rule 13 (S -> DO COLON S WHILE LPAREN RELEXPR RPAREN S .)
    LBRACK          reduce using rule 13 (S -> DO COLON S WHILE LPAREN RELEXPR RPAREN S .)
    END             reduce using rule 13 (S -> DO COLON S WHILE LPAREN RELEXPR RPAREN S .)
    SUBPROCEDURE    reduce using rule 13 (S -> DO COLON S WHILE LPAREN RELEXPR RPAREN S .)
    IN              reduce using rule 13 (S -> DO COLON S WHILE LPAREN RELEXPR RPAREN S .)
    PRINT           reduce using rule 13 (S -> DO COLON S WHILE LPAREN RELEXPR RPAREN S .)
    WEND            reduce using rule 13 (S -> DO COLON S WHILE LPAREN RELEXPR RPAREN S .)
    ELSE            reduce using rule 13 (S -> DO COLON S WHILE LPAREN RELEXPR RPAREN S .)


state 125

    (9) S -> IF LPAREN RELEXPR RPAREN THEN S IFELSE END S .

    PEND            reduce using rule 9 (S -> IF LPAREN RELEXPR RPAREN THEN S IFELSE END S .)
    WHILE           reduce using rule 9 (S -> IF LPAREN RELEXPR RPAREN THEN S IFELSE END S .)
    IF              reduce using rule 9 (S -> IF LPAREN RELEXPR RPAREN THEN S IFELSE END S .)
    DO              reduce using rule 9 (S -> IF LPAREN RELEXPR RPAREN THEN S IFELSE END S .)
    FOR             reduce using rule 9 (S -> IF LPAREN RELEXPR RPAREN THEN S IFELSE END S .)
    LPAREN          reduce using rule 9 (S -> IF LPAREN RELEXPR RPAREN THEN S IFELSE END S .)
    NINT            reduce using rule 9 (S -> IF LPAREN RELEXPR RPAREN THEN S IFELSE END S .)
    NFLOAT          reduce using rule 9 (S -> IF LPAREN RELEXPR RPAREN THEN S IFELSE END S .)
    ID              reduce using rule 9 (S -> IF LPAREN RELEXPR RPAREN THEN S IFELSE END S .)
    LBRACK          reduce using rule 9 (S -> IF LPAREN RELEXPR RPAREN THEN S IFELSE END S .)
    END             reduce using rule 9 (S -> IF LPAREN RELEXPR RPAREN THEN S IFELSE END S .)
    SUBPROCEDURE    reduce using rule 9 (S -> IF LPAREN RELEXPR RPAREN THEN S IFELSE END S .)
    IN              reduce using rule 9 (S -> IF LPAREN RELEXPR RPAREN THEN S IFELSE END S .)
    PRINT           reduce using rule 9 (S -> IF LPAREN RELEXPR RPAREN THEN S IFELSE END S .)
    WEND            reduce using rule 9 (S -> IF LPAREN RELEXPR RPAREN THEN S IFELSE END S .)
    ELSE            reduce using rule 9 (S -> IF LPAREN RELEXPR RPAREN THEN S IFELSE END S .)


state 126

    (10) IFELSE -> ELSE THEN S .

    END             reduce using rule 10 (IFELSE -> ELSE THEN S .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for WHILE in state 40 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 68 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 68 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 68 resolved as shift
WARNING: shift/reduce conflict for IF in state 76 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 76 resolved as shift
WARNING: shift/reduce conflict for DO in state 76 resolved as shift
WARNING: shift/reduce conflict for FOR in state 76 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 76 resolved as shift
WARNING: shift/reduce conflict for NINT in state 76 resolved as shift
WARNING: shift/reduce conflict for NFLOAT in state 76 resolved as shift
WARNING: shift/reduce conflict for ID in state 76 resolved as shift
WARNING: shift/reduce conflict for LBRACK in state 76 resolved as shift
WARNING: shift/reduce conflict for IF in state 77 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 77 resolved as shift
WARNING: shift/reduce conflict for DO in state 77 resolved as shift
WARNING: shift/reduce conflict for FOR in state 77 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 77 resolved as shift
WARNING: shift/reduce conflict for NINT in state 77 resolved as shift
WARNING: shift/reduce conflict for NFLOAT in state 77 resolved as shift
WARNING: shift/reduce conflict for ID in state 77 resolved as shift
WARNING: shift/reduce conflict for LBRACK in state 77 resolved as shift
WARNING: shift/reduce conflict for IF in state 81 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 81 resolved as shift
WARNING: shift/reduce conflict for DO in state 81 resolved as shift
WARNING: shift/reduce conflict for FOR in state 81 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 81 resolved as shift
WARNING: shift/reduce conflict for NINT in state 81 resolved as shift
WARNING: shift/reduce conflict for NFLOAT in state 81 resolved as shift
WARNING: shift/reduce conflict for ID in state 81 resolved as shift
WARNING: shift/reduce conflict for LBRACK in state 81 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 112 resolved as shift
WARNING: shift/reduce conflict for IF in state 112 resolved as shift
WARNING: shift/reduce conflict for DO in state 112 resolved as shift
WARNING: shift/reduce conflict for FOR in state 112 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 112 resolved as shift
WARNING: shift/reduce conflict for NINT in state 112 resolved as shift
WARNING: shift/reduce conflict for NFLOAT in state 112 resolved as shift
WARNING: shift/reduce conflict for ID in state 112 resolved as shift
WARNING: shift/reduce conflict for LBRACK in state 112 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 114 resolved as shift
WARNING: shift/reduce conflict for IF in state 114 resolved as shift
WARNING: shift/reduce conflict for DO in state 114 resolved as shift
WARNING: shift/reduce conflict for FOR in state 114 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 114 resolved as shift
WARNING: shift/reduce conflict for NINT in state 114 resolved as shift
WARNING: shift/reduce conflict for NFLOAT in state 114 resolved as shift
WARNING: shift/reduce conflict for ID in state 114 resolved as shift
WARNING: shift/reduce conflict for LBRACK in state 114 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 119 resolved as shift
WARNING: shift/reduce conflict for IF in state 119 resolved as shift
WARNING: shift/reduce conflict for DO in state 119 resolved as shift
WARNING: shift/reduce conflict for FOR in state 119 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 119 resolved as shift
WARNING: shift/reduce conflict for NINT in state 119 resolved as shift
WARNING: shift/reduce conflict for NFLOAT in state 119 resolved as shift
WARNING: shift/reduce conflict for ID in state 119 resolved as shift
WARNING: shift/reduce conflict for LBRACK in state 119 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 122 resolved as shift
WARNING: shift/reduce conflict for IF in state 122 resolved as shift
WARNING: shift/reduce conflict for DO in state 122 resolved as shift
WARNING: shift/reduce conflict for FOR in state 122 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 122 resolved as shift
WARNING: shift/reduce conflict for NINT in state 122 resolved as shift
WARNING: shift/reduce conflict for NFLOAT in state 122 resolved as shift
WARNING: shift/reduce conflict for ID in state 122 resolved as shift
WARNING: shift/reduce conflict for LBRACK in state 122 resolved as shift
